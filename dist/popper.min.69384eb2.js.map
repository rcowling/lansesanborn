{"version":3,"sources":["../../src/methods/defaults.js","../../src/utils/isFunction.js","../../src/utils/getStyleComputedProperty.js","../../src/utils/getParentNode.js","../../src/utils/getScrollParent.js","../../src/utils/getReferenceNode.js","../../src/utils/isIE.js","../../src/utils/getOffsetParent.js","../../src/utils/getRoot.js","../../src/utils/findCommonOffsetParent.js","../../src/utils/isOffsetContainer.js","../../src/utils/getScroll.js","../../src/utils/includeScroll.js","../../src/utils/getBordersSize.js","../../src/utils/getWindowSizes.js","../../src/utils/getClientRect.js","../../src/utils/getBoundingClientRect.js","../../src/utils/getOffsetRectRelativeToArbitraryNode.js","../../src/utils/getViewportOffsetRectRelativeToArtbitraryNode.js","../../src/utils/isFixed.js","../../src/utils/getFixedPositionOffsetParent.js","../../src/utils/getBoundaries.js","../../src/utils/computeAutoPlacement.js","../../src/utils/getReferenceOffsets.js","../../src/utils/getOuterSizes.js","../../src/utils/getOppositePlacement.js","../../src/utils/getPopperOffsets.js","../../src/utils/find.js","../../src/utils/runModifiers.js","../../src/utils/findIndex.js","../../src/methods/update.js","../../src/utils/isModifierEnabled.js","../../src/utils/getSupportedPropertyName.js","../../src/methods/destroy.js","../../src/utils/getWindow.js","../../src/utils/setupEventListeners.js","../../src/methods/enableEventListeners.js","../../src/methods/disableEventListeners.js","../../src/utils/removeEventListeners.js","../../src/utils/isNumeric.js","../../src/utils/setStyles.js","../../src/utils/isModifierRequired.js","../../src/utils/getOppositeVariation.js","../../src/utils/clockwise.js","../../src/modifiers/offset.js","../../src/modifiers/arrow.js","../../src/utils/getRoundedOffsets.js","../../src/utils/isBrowser.js","../../src/utils/debounce.js","../../src/modifiers/computeStyle.js","../../src/modifiers/flip.js","../../src/index.js","../../src/modifiers/index.js","../../src/modifiers/shift.js","../../src/modifiers/preventOverflow.js","../../src/modifiers/keepTogether.js","../../src/modifiers/inner.js","../../src/modifiers/hide.js","../../src/modifiers/applyStyle.js","../../src/utils/setAttributes.js"],"names":["functionToCheck","toString","call","nodeType","window","css","element","ownerDocument","defaultView","getComputedStyle","property","nodeName","parentNode","host","document","body","getStyleComputedProperty","overflow","overflowX","overflowY","test","getScrollParent","getParentNode","reference","referenceNode","version","isIE11","documentElement","noOffsetParent","isIE","offsetParent","nextElementSibling","indexOf","getOffsetParent","node","getRoot","element1","element2","order","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","start","end","range","createRange","setStart","setEnd","commonAncestorContainer","contains","isOffsetContainer","firstElementChild","element1root","findCommonOffsetParent","side","upperSide","html","scrollingElement","subtract","scrollTop","getScroll","scrollLeft","modifier","top","bottom","left","right","sideA","sideB","parseFloat","styles","Math","parseInt","computedStyle","getSize","offsets","width","height","rect","getBoundingClientRect","result","sizes","getWindowSizes","clientWidth","clientHeight","horizScrollbar","offsetWidth","vertScrollbar","offsetHeight","getBordersSize","getClientRect","fixedPosition","isIE10","runIsIE","isHTML","childrenRect","parentRect","scrollParent","borderTopWidth","borderLeftWidth","marginTop","marginLeft","parent","includeScroll","excludeScroll","relativeOffset","getOffsetRectRelativeToArbitraryNode","innerWidth","innerHeight","isFixed","parentElement","el","boundaries","getFixedPositionOffsetParent","getReferenceNode","getViewportOffsetRectRelativeToArtbitraryNode","boundariesNode","popper","padding","isPaddingNumber","getBoundaries","rects","refRect","sortedAreas","Object","keys","map","getArea","sort","b","area","a","filteredAreas","filter","computedPlacement","length","key","variation","placement","split","x","marginBottom","y","marginRight","hash","replace","popperRect","getOuterSizes","popperOffsets","isHoriz","mainSide","secondarySide","measurement","secondaryMeasurement","referenceOffsets","getOppositePlacement","Array","prototype","find","arr","forEach","ends","modifiers","slice","findIndex","cur","match","obj","warn","fn","enabled","isFunction","data","some","name","upperProp","charAt","toUpperCase","i","prefixes","prefix","toCheck","style","updateBound","addEventListener","state","passive","scrollElement","isBody","target","push","scrollParents","eventsEnabled","scheduleUpdate","removeEventListener","isNaN","isFinite","unit","isNumeric","requesting","isRequired","requested","counter","index","validPlacements","concat","reverse","useHeight","fragments","offset","frag","trim","divider","search","splitRegex","ops","mergeWithPrevious","op","reduce","toValue","str","value","index2","min","floor","round","max","longerTimeoutBrowsers","isBrowser","userAgent","navigator","supportsMicroTasks","Promise","called","resolve","then","scheduled","MSInputMethodContext","documentMode","isFirefox","placements","BEHAVIORS","Popper","options","requestAnimationFrame","update","debounce","bind","Defaults","jquery","modifierOptions","onLoad","enableEventListeners","isDestroyed","getReferenceOffsets","positionFixed","computeAutoPlacement","flip","boundariesElement","originalPlacement","getPopperOffsets","position","runModifiers","isCreated","onUpdate","onCreate","destroy","isModifierEnabled","removeAttribute","willChange","getSupportedPropertyName","disableEventListeners","removeOnDestroy","removeChild","setupEventListeners","Utils","global","PopperUtils","basePlacement","shiftvariation","isVertical","shiftOffsets","parseOffset","instance","transformProp","popperStyles","transform","priority","check","escapeWithReference","opSide","isModifierRequired","arrowElement","querySelector","len","sideCapitalized","toLowerCase","altSide","arrowElementSize","center","popperMarginSide","popperBorderSide","sideValue","arrow","flipped","placementOpposite","flipOrder","behavior","FLIP","CLOCKWISE","clockwise","COUNTERCLOCKWISE","refOffsets","overlapsRef","overflowsLeft","overflowsRight","overflowsTop","overflowsBottom","overflowsBoundaries","flippedVariationByRef","flipVariations","flippedVariationByContent","flipVariationsByContent","flippedVariation","getOppositeVariation","subtractLength","bound","hide","attributes","legacyGpuAccelerationOption","gpuAcceleration","offsetParentRect","noRound","referenceWidth","popperWidth","isVariation","horizontalToInteger","verticalToInteger","bothOddWidth","getRoundedOffsets","devicePixelRatio","prefixedProperty","invertTop","invertLeft","arrowStyles","setAttribute"],"mappings":";;;AAkBe,IAAA,EAAA,EAAA,UAAA,ICXf,SAAA,EAAA,GAAA,iBAAA,SAAA,oBAAA,OAAA,OAAA,QAAA,IAAA,mBAAA,GAAA,EAAA,IAAA,EAAA,GAAA,EAAA,OAAA,IAAA,CAAA,KAAA,WAAA,aAAA,SAAoD,EAAA,GAGhDA,OAC2C,GAAA,sBAAnCC,GAAAA,SAASC,KCJrB,GAAA,SAAoE,EAAA,EAAA,GACzC,GAAA,IAAbC,EAAAA,SAINC,MAAAA,GAAAA,IACAC,EADSC,EAAQC,cAAcC,YAClBC,iBAA0B,EAAA,MACtCC,OAAWL,EAAAA,EAAXK,GCPT,EAAA,SAA+C,EAAA,GACpB,MAAA,SAAbC,EAAAA,SAGLL,EAAAA,EAAQM,YAAcN,EAAQO,KCDvC,SAAiD,EAAA,GAE3C,IACKC,EAAAA,OAASC,SAAAA,KAGVT,OAAAA,EAAQK,UACT,IAAA,OACA,IAAA,OACIL,OAAQC,EAAAA,cAAcQ,KAC1B,IAAA,YACIT,OAAQS,EAAAA,KAIwBC,IAAAA,EAAAA,EAAnCC,GAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,UAAWC,EAAAA,EAAAA,UAfkB,MAgBnBC,wBAAAA,KAAKH,EAA7B,EAAA,GAIGI,EAAAA,EAAgBC,EAAhBD,ICvBT,SAAoD,EAAA,GAC3CE,OAAaA,GAAAA,EAAUC,cAAgBD,EAAUC,cCI1D,EAAA,SAAsC,EAAA,GACpB,OAAZC,KADgC,EAIpB,EAAA,KAJoB,EAO7BC,EAAAA,GCVT,EAAA,SAAiD,EAAA,GAC3C,IACKZ,EAAAA,OAASa,SAAAA,gBAF6B,IAKzCC,IAAiBC,EAAAA,EAAK,IAAMf,SAASC,KAAO,KAG9Ce,EAAexB,EAAQwB,cAAgB,KAEpCA,IAAmCxB,GAAAA,EAAQyB,oBACjC,GAACzB,EAAUA,EAAQyB,oBAAoBD,aAGlDnB,IAAWmB,EAAAA,GAAgBA,EAAanB,SAdC,OAgBjB,GAAA,SAA1B,GAAiD,SAhBN,GAuBa,IAApCqB,CAAAA,KAAAA,KAAAA,SAAAA,QAAQF,EAAanB,WACY,WAAhB,EAAA,EAAA,YAEhCsB,EA1BsC,GAiBtC3B,EAAAA,EAAUA,EAAQC,cAAcoB,gBAAkBb,SAASa,gBCnBtE,SAAsC,EAAA,GACZ,OAApBO,OAAKtB,EAAAA,WACAuB,EAAAA,EAAQD,EAAKtB,YCGxB,SAAmE,EAAA,EAAA,GAE7D,KAAa,GAACwB,EAASjC,UAAvB,GAAiDkC,EAASlC,UACrDW,OAASa,SAAAA,gBAIZW,IACJF,EAAAA,EAASG,wBACTC,GAAAA,KAAKC,4BACDC,EAAQJ,EACRK,EAAAA,EAAAA,EAAML,EAGNM,EAAAA,EAAAA,EAAQ9B,SAAS+B,cACjBC,EAAAA,SAAgB,EAAA,GAChBC,EAAAA,OAAY,EAAA,GACVC,IAA4BJ,EAAAA,EAA5BI,wBAILZ,GAAAA,IACCC,GAAAA,IADDD,GAEDM,EAAMO,SAEFC,GAAAA,OCnC2C,SAAA,GACzCvC,IAAaL,EAAAA,EAAbK,SADyC,MAEhC,SAFgC,IAMlC,SAAUsB,GAAAA,EAAgB3B,EAAQ6C,qBANA,GDuCxClB,CAAAA,GAAAA,EAAAA,EAIHmB,GAAAA,IAAejB,EAAAA,EAjC4C,GAAA,OAkChDtB,EAAAA,KACRwC,EAAuBD,EAAavC,KAnCoB,GAqCxDwC,EAAiClB,EAAAA,EAAkBtB,GAAAA,MEzC9D,SAAyD,EAAA,GAAdyC,IACnCC,EAAqB,SADqB,EAAA,UAAA,aAAA,IAAA,UAAA,GAAA,UAAA,GAAA,OACb,YAAc,aAC3C5C,EAAWL,EAAQK,SAER,GAAA,SAAuB,GAAA,SAAQ,EAAA,CACxC6C,IAAOlD,EAAAA,EAAQC,cAAcoB,gBAE5B8B,OADkBnD,EAAQC,cAAckD,kBACxCA,GAGFnD,GAAAA,OCPT,EAAA,GAAA,SAAuE,EAAA,EAAA,GAAlBoD,IAAAA,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,UAAAA,IAC7CC,UAAAA,GAAAA,EAAYC,EAAmB,EAAA,OAC/BC,EAAaD,EAAmB,EAAA,QAChCE,EAAWJ,GAAY,EAAI,EAC5BK,OAAAA,EAAAA,KAAOJ,EACPK,EAAAA,EAAAA,QAAUL,EACVM,EAAAA,EAAAA,MAAQJ,EACRK,EAAAA,EAAAA,OAASL,ECRhB,EAAA,EAAA,SAAqD,EAAA,EAAA,GAC7CM,IAAiB,EAAA,MAAM,EAAA,OAAS,MAChCC,EAAkB,QAAS,EAAA,QAAU,SAGzCC,OAAWC,WAAAA,EAAAA,SAAAA,EAAAA,UACXD,WAAWC,EAAAA,SAAAA,EAAAA,UCdmC,SAAA,EAAA,EAAA,EAAA,EAAA,GACzCC,OACLxD,EAAAA,EAAAA,SAAAA,GACAA,EAAAA,SAAAA,GACAyC,EAAAA,SAAAA,GACAA,EAAAA,SAAAA,GACAA,EAAAA,SAAAA,GACA3B,EAAK,IACA2C,SAAShB,EAAAA,SAAAA,IACZgB,SAASC,EAAgC,UAAA,WAAW,EAAA,MAAQ,UAC5DD,SAASC,EAAgC,UAAA,WAAW,EAAA,SAAW,WAC/D,GAIN,SAAiD,EAAA,GACzC1D,IAAOD,EAAAA,EAASC,KAChByC,EAAO1C,EAASa,gBAChB8C,EAAgB5C,EAAK,KAAOpB,iBAE3B,GAAA,MAAA,CACGiE,OAAAA,EAAQ,SADX,EAAA,EAAA,GAEEA,MAAAA,EAAQ,QAFV,EAAA,EAAA,ICfT,SAA+C,EAAA,GAGpCC,OAAAA,EAAAA,GAAAA,EAAAA,CAAAA,MAAAA,EAAQV,KAAOU,EAAQC,MACtBD,OAAAA,EAAQZ,IAAMY,EAAQE,SCGlC,SAAuD,EAAA,GACjDC,IAKA,EAAA,GAAA,IACEjD,GAAAA,EAAK,IAAK,CACLvB,EAAAA,EAAQyE,wBACTpB,IAAYC,EAAAA,EAAmB,EAAA,OAC/BC,EAAaD,EAAmB,EAAA,QACjCG,EAAAA,KAJO,EAKPE,EAAAA,MALO,EAMPD,EAAAA,QANO,EAOPE,EAAAA,OAPP,OAUS5D,EAAAA,EAAQyE,wBAGnB,MAAQ,IAEFC,IAAS,EAAA,CACPF,KAAAA,EAAKb,KACNa,IAAAA,EAAKf,IACHe,MAAAA,EAAKZ,MAAQY,EAAKb,KACjBa,OAAAA,EAAKd,OAASc,EAAKf,KAIvBkB,EAA6B,SAAbtE,EAAAA,SAAsBuE,EAAe5E,EAAQC,eAC7DqE,GAAAA,EACJK,EAAML,OAAStE,EAAQ6E,aAAeH,EAAOJ,MACzCC,EACJI,EAAMJ,QAAUvE,EAAQ8E,cAAgBJ,EAAOH,OAE7CQ,EAAiB/E,EAAQgF,YACzBC,EAAAA,EAAgBjF,EAAQkF,aAIxBH,EAAAA,GAAAA,GAAiC,EAAA,CAC7Bf,IAAStD,EAAAA,EACGyE,GAAAA,GAAAA,EAAuB,EAAA,KACxBA,GAAAA,EAAuB,EAAA,KAEjCb,EAAAA,OAL4B,EAM5BC,EAAAA,QAGFa,EAAAA,OCzD6F,EAAA,GAAA,SAAA,EAAA,EAAA,GAAvBC,IAAAA,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,UAAAA,IACvEC,UAAAA,GAAAA,EAASC,EAAQ,IACjBC,EAA6B,SAAbnF,EAAAA,SAChBoF,EAAehB,EACfiB,GAAAA,EAAajB,EACbkB,GAAAA,EAAe5E,EAEfiD,GAAAA,EAAStD,EACTkF,GAAAA,EAAiB7B,WAAWC,EAAO4B,gBACnCC,EAAkB9B,WAAWC,EAAO6B,iBAGvCR,GAZiG,IAavF5B,EAAAA,IAAMQ,EAASyB,EAAWjC,IAAK,GAC/BE,EAAAA,KAAOM,EAASyB,EAAW/B,KAAM,IAE1CU,IAAUe,EAAAA,EAAc,CACrBK,IAAAA,EAAahC,IAAMiC,EAAWjC,IADT,EAEpBgC,KAAAA,EAAa9B,KAAO+B,EAAW/B,KAFX,EAGnB8B,MAAAA,EAAanB,MACZmB,OAAAA,EAAalB,SAEfuB,GAAAA,EAAAA,UAAY,EACZC,EAAAA,WAAa,GAME,GAAA,EAAA,CACfD,IAAY/B,EAAAA,WAAWC,EAAO8B,WAC9BC,EAAahC,WAAWC,EAAO+B,YAE7BtC,EAAAA,KAAOmC,EAJM,EAKblC,EAAAA,QAAUkC,EALG,EAMbjC,EAAAA,MAAQkC,EANK,EAObjC,EAAAA,OAASiC,EAPI,EAUbC,EAAAA,UAVa,EAWbC,EAAAA,WAIRT,EAAAA,OAAAA,IAAAA,EACIU,EAAOrD,SADX2C,GAEIU,IAAqD,GAAA,SAAb3F,EAAAA,YAElC4F,EAAAA,ECnDwF,EAAA,IAAA,EAAA,SAAA,EAAA,GAAvBC,IAAAA,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,UAAAA,IACvEhD,UAAAA,GAAAA,EAAOlD,EAAQC,cAAcoB,gBAC7B8E,EAAiBC,EACjB9B,EAAAA,GAAAA,EAAQL,EAASf,EAAK2B,YAAa/E,OAAOuG,YAAc,GACxD9B,EAASN,EAASf,EAAK4B,aAAchF,OAAOwG,aAAe,GAE3DjD,EAAY,EAAmC,EAAlBC,EAC7BC,GAAAA,EAAa,EAA2C,EAA1BD,EAAgB,EAAA,QAS7C8B,OCTT,EDEiB,CACR/B,IAAAA,EAAY8C,EAAe1C,IAAM0C,EAAeL,UAC/CvC,KAAAA,EAAa4C,EAAexC,KAAOwC,EAAeJ,WAF3C,MAAA,EAAA,OAAA,ICFjB,SAAyC,EAAA,GACjC1F,IAAWL,EAAAA,EAAQK,SACR,GAAA,SAAuB,GAAA,SAGc,EAAA,OAAA,EAAA,GAAA,UAAhB,EAAA,EAAA,YAGhCC,OAAAA,EAAAA,IAAaU,EAAAA,EARoB,GAAA,QAYhCuF,GAAAA,ECbT,GAAA,SAA8D,EAAA,GAEvD,IAAY,IAACvG,EAAQwG,eAAiBjF,IAClCf,OAASa,SAAAA,gBAH0C,IAKxDoF,IAAKzG,EAAAA,EAAQwG,cACVC,GAAoD,SAAjB,EAAA,EAAA,cACnCA,EAAAA,EAAGD,cAEHC,OAAMjG,GAAAA,SAASa,gBCExB,SAME,EAAA,EAAA,EAAA,EAAA,GADAgE,IAAAA,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,UAAAA,IAIIqB,UAAAA,GAAAA,EAAa,CAAEjD,IAAK,EAAGE,KAAM,GAC3BnC,EAAe6D,EAAgBsB,EAAhBtB,GAAuDtC,EAA+B6D,EAAAA,EAA/B7D,IAGlD,GAAA,aACX8D,EAAAA,EAAAA,EAGV,EAAA,OAAA,CAECC,IACsB,EAAA,iBAHvB,EAK+B,UADf/F,EAAAA,EAAgBC,EAAhBD,KACEV,WACA0G,EAAAA,EAAO9G,cAAcoB,iBAGvB0F,EADc,WAR9B,EASgBA,EAAO9G,cAAcoB,gBATrC,EAcGgD,IAAU+B,EAAAA,EAOgB,EAAA,EAAA,GAAA,GAAA,SAAb/F,EAAAA,UAAwBkG,EAAuB,GAa1DS,EAAAA,MAb0D,CACtCpC,IAAAA,EAAAA,EAAemC,EAAO9G,eAAxCsE,EAAAA,EAAAA,OAAQD,EAAAA,EAAAA,MACLb,EAAAA,KAAOY,EAAQZ,IAAMY,EAAQyB,UAC7BpC,EAAAA,OAASa,EAASF,EAAQZ,IAC1BE,EAAAA,MAAQU,EAAQV,KAAOU,EAAQ0B,WAC/BnC,EAAAA,MAAQU,EAAQD,EAAQV,MASjCsD,IAAqC,EAAA,iBADjCD,EAAAA,GAAW,GAEVrD,OAAAA,EAAAA,MAAQsD,EAA4BD,EAAAA,EAAQrD,MAAQ,EACpDF,EAAAA,KAAOwD,EAA4BD,EAAAA,EAAQvD,KAAO,EAClDG,EAAAA,OAASqD,EAA4BD,EAAAA,EAAQpD,OAAS,EACtDF,EAAAA,QAAUuD,EAA4BD,EAAAA,EAAQtD,QAAU,EC3EjC,EAAA,SAAA,EAAA,GAC3BY,OADUA,EAAAA,MAAOC,EAAAA,OAa1B,SAOE,EAAA,EAAA,EAAA,EAAA,EAAA,GADAyC,IAAU,EAAA,EAAA,UAAA,aAAA,IAAA,UAAA,GAAA,UAAA,GAAA,EAEwB,IAAC,IAArBtF,EAAAA,QAAQ,QAIhBgF,OAAAA,EAAAA,IAAaQ,EAAAA,EAObC,EAAAA,EAAAA,EAAAA,GAAAA,EAAQ,CACP,IAAA,CACIT,MAAAA,EAAWpC,MACV8C,OAAAA,EAAQ3D,IAAMiD,EAAWjD,KAE5B,MAAA,CACEiD,MAAAA,EAAW9C,MAAQwD,EAAQxD,MAC1B8C,OAAAA,EAAWnC,QAEb,OAAA,CACCmC,MAAAA,EAAWpC,MACVoC,OAAAA,EAAWhD,OAAS0D,EAAQ1D,QAEhC,KAAA,CACG0D,MAAAA,EAAQzD,KAAO+C,EAAW/C,KACzB+C,OAAAA,EAAWnC,SAIjB8C,EAAcC,OAAOC,KACxBC,GAAAA,IAAI,SAEAL,GAAAA,OAAAA,EAAAA,CAAAA,IAAAA,GAAAA,EACGM,GAAAA,CAAAA,KAAAA,EAAQN,EAARM,QAEPC,KAAK,SAAUC,EAAAA,GAAAA,OAAEC,EAAAA,KAAOC,EAAED,OAEvBE,EAAgBT,EAAYU,OAChC,SAAGzD,GAAAA,IAAAA,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OACRD,OAASyC,GAAAA,EAAOlC,aAAeN,GAAUwC,EAAOjC,eAG9CkD,EAA2C,EAATC,EAAAA,OACpCH,EAAc,GAAGI,IACjBb,EAAY,GAAGa,IAEbC,EAAYC,EAAUC,MAAM,KAAK,GAEhCL,OAAqBG,GAAAA,EAAAA,IAAAA,EAA8B,ICzD5D,SAA4F,EAAA,EAAA,EAAA,GAAtB9C,IAAgB,EAAA,EAAA,UAAA,aAAA,IAAA,UAAA,GAAA,UAAA,GAAA,KAE7Ee,OCVT,EAAA,EDS6Bf,EAAgBsB,EAAhBtB,GAAuDtC,EAA+B6D,EAAAA,EAA/B7D,ICTpF,GAAA,SAA+C,EAAA,GACvCjD,IACAkE,EADShE,EAAQC,cAAcC,YACfC,iBAChBmI,GAAAA,EAAIvE,WAAWC,EAAO8B,WAAa,GAAK/B,WAAWC,EAAOuE,cAAgB,GAC1EC,EAAIzE,WAAWC,EAAO+B,YAAc,GAAKhC,WAAWC,EAAOyE,aAAe,GCJlF,MDKiB,CACNzI,MAAAA,EAAQgF,YADF,EAELhF,OAAAA,EAAQkF,aAFH,GCLjB,SAAwD,EAAA,GAChDwD,IAAO,EAAA,CAAE/E,KAAM,QAASC,MAAO,OAAQF,OAAQ,MAAOD,IAAK,UAC1D2E,OAAUO,EAAAA,QAAQ,yBAA0B,SAAWD,GAAAA,OAAvD,EAAA,KCIT,SAA8E,EAAA,EAAA,EAAA,GAChEN,EAAAA,EAAUC,MAAM,KAAK,GAG3BO,IAAaC,EAAAA,EAGbC,GAAAA,EAAgB,CACbF,MAAAA,EAAWtE,MACVsE,OAAAA,EAAWrE,QAIfwE,GAAoD,IAAxBrH,CAAAA,QAAAA,QAAAA,QAC5BsH,GAAAA,EAAWD,EAAU,MAAQ,OAC7BE,EAAgBF,EAAU,OAAS,MACnCG,EAAcH,EAAU,SAAW,QACnCI,EAAuB,EAAsB,QAAX,SAGtCC,OAAAA,EAAAA,GAAAA,EACAA,GAAAA,EAAgC,GAAA,EAChCR,EAA0B,GAAA,EACxBR,EAAAA,GAAAA,IAEAgB,EAAAA,EAAkCR,GAAAA,EAGlCQ,GAAAA,EAAiBC,EAAjBD,IChCN,EAAA,SAAyC,EAAA,EAAA,GAEnCE,OAAMC,MAAAA,UAAUC,KACXC,EAAID,KAH0B,GAOhCC,EAAI1B,OAAc,GAAA,GCF3B,SAA4D,EAAA,EAAA,EAAA,GAK3C2B,YAJQC,IAEnBC,EAAAA,EAAAA,EAAUC,MAAM,ECNtB,SAAoD,EAAA,EAAA,GAE9CP,GAAAA,MAAMC,UAAUO,UACXL,OAAIK,EAAAA,UAAU,SAAOC,GAAAA,OAArB,EAAA,KAAA,IAIHC,IAAQR,EAAAA,EAAU,EAAA,SAAOS,GAAAA,OAAjB,EAAA,KAAA,IACPR,OAAI/H,EAAAA,QDLb,GAGyBoI,CAAqB,EAAA,OAAxCF,KAEWF,QAAQ,SAAY,GAC7BlG,EAAAA,UACM0G,QAAAA,KAAK,yDAETC,IAAK3G,EAAAA,EAAAA,UAAwBA,EAAS2G,GACxC3G,EAAS4G,SAAWC,EALS,KAS1BhG,EAAAA,QAAQ0C,OAAS3B,EAAckF,EAAKjG,QAAQ0C,QAC5C1C,EAAAA,QAAQpD,UAAYmE,EAAckF,EAAKjG,QAAQpD,WAE7CkJ,EAAAA,EAZwB,EAAA,MEPrC,ECNA,SAAmE,EAAA,EAAA,GAC1DP,OAAUW,EAAAA,KACf,SAAGC,GAAAA,IAAAA,EAAAA,EAAAA,KAAoBJ,OAAdA,EAAAA,SAAyBI,IAD7B,ICAT,SAA2D,EAAA,GAIpD,IAAA,IAAA,EAAA,EAAA,EAAA,KAAA,SAAA,MAAA,KAFCC,EAAYrK,EAASsK,OAAO,GAAGC,cAAgBvK,EAASyJ,MAAM,GAE3De,EAAI,EAAGA,EAAIC,EAAS5C,OAAQ2C,IAAK,CAClCE,IAASD,EAAAA,EACTE,GAAAA,EAAUD,EAAAA,GAAAA,EAAAA,EAC4B,EAAA,QAAA,IAAxBrK,SAAAA,KAAKuK,MAIpB,GAAA,OAAA,EAAA,OCVT,KCHA,SAA2C,EAAA,GACnC/K,IAAgBD,EAAAA,EAAQC,cACvBA,OAAgBA,EAAAA,EAAcC,YAAcJ,OCkBrD,SAKE,EAAA,EAAA,EAAA,EAAA,GAEMmL,EAAAA,YAFN,EAGqBC,EAAAA,GAAAA,iBAAiB,SAAUC,EAAMF,YAAa,CAAEG,SAAF,IAG7DC,IAAgBtK,EAAAA,EAGpB,GAAA,OApCyE,SAAA,EAAA,EAAA,EAAA,EAAA,GACrEuK,IAAmC,EAAA,SAAbjL,EAAAA,SACtBkL,EAASD,EAAS3F,EAAa1F,cAAcC,YAC5CgL,EAAAA,EAAAA,iBAAkC,EAAA,EAAA,CAAEE,SAAF,IAIrCrK,GAAAA,EAAAA,EAAgBwK,EAAOjL,YAPgD,EAAA,EAAA,GAa7DkL,EAAAA,KAShB,GAcI,CAAA,EAAA,SACAL,EAAMF,YACNE,EAAMM,eAEFJ,EAAAA,cACAK,EAAAA,EAAAA,eCpCR,EAAA,ECCA,SAAgD,ICDhD,IAA+D,EAAA,EDEzD,KAAKP,MAAMO,gBACQ,qBAAA,KAAKC,gBACrBR,KAAAA,OCJsD,EDIzB,KAAKlK,UCJoB,EDIT,KAAKkK,MCFpCS,EAAAA,GAAAA,oBAAoB,SAAUT,EAAMF,aAGnDQ,EAAAA,cAAc/B,QAAQ,SAAU,GAC7BkC,EAAAA,oBAAoB,SAAUT,EAAMF,eAIvCA,EAAAA,YAAc,KACdQ,EAAAA,cACAJ,GAAAA,EAAAA,cAAgB,KAChBK,EAAAA,eDZR,EAAA,IEFA,SAAqC,EAAA,GACtB,MAAA,KAAM,IAACG,MAAM9H,WAAN8H,KAAwBC,SCE9C,GAAA,SAAmD,EAAA,EAAA,GAC1CvE,OAAAA,KAAamC,GAAAA,QAAQ,SAAQ,GAC9BqC,IAAO,EAAA,IAIN,IADmDrK,CAAAA,QAAAA,SAAAA,MAAAA,QAAAA,SAAAA,QAAAA,QAEtDsK,IAAAA,EAAUhI,EAAVgI,MAEO,EAAA,MAEDhB,EAAAA,MAAchH,GAAAA,EAVxB,GAAA,ICCF,SAIE,EAAA,EAAA,EAAA,GACMiI,IAAazC,EAAAA,EAAgB,EAAA,SAAGgB,GAAWA,OAAXA,EAAAA,OAAnB,IAEb0B,IACJ,GACAtC,EAAUW,KAAK,SAAY,GAEvB/G,OAASgH,EAAAA,OACThH,GAAAA,EAAS4G,SACT5G,EAASxB,MAAQiK,EAAWjK,QAI9B,IAAa,EAAA,CACTiK,IAEE/B,EAAAA,IAAAA,EAAAA,IAAAA,QAAAA,KACHiC,IAAAA,EAAAA,6BAAAA,EAAAA,4DC1BT,EAAA,KAAA,OAAA,ECQA,SAA8D,EAAA,GAAjBC,IAAAA,EAAAA,EAAAA,UAAAA,aAAAA,IAAAA,UAAAA,IACrCC,UAAAA,GAAAA,EAAQC,GAAgB5K,QACxB+H,GAAAA,EAAM6C,GACTzC,MAAMwC,EAAQ,GACdE,OAAOD,GAAgBzC,MAAM,EAFpByC,IAGLF,OAAU3C,EAAAA,EAAI+C,UCJvB,EA0DA,SAKE,EAAA,EAAA,EAAA,EAAA,GACMnI,IAKAoI,EAAAA,CAAAA,EAAAA,GAAAA,GAA0D,IAA5B/K,CAAAA,QAAAA,QAAAA,QAI9BgL,GAAAA,EAAYC,EAAOtE,MAAM,WAAWb,IAAI,SAAQoF,GAAAA,OAAKC,EAAAA,SAIrDC,EAAUJ,EAAUhL,QACxB8H,EAAgB,EAAA,SAAgC,GAAA,OAAC,IAApBuD,EAAAA,OAAO,WAGlCL,EAA0D,KAAC,IAAlBhL,EAAAA,GAAAA,QAAQ,MAC3CwI,QAAAA,KACN,gFAME8C,IAAa,EAAA,cACfC,GAAmB,IASnB,EAAA,CATMH,GACN,CACEJ,EACG7C,MAAM,EACN0C,GAAAA,OAAO,CAACG,EAAmBrE,GAAAA,MAAkB,GAAA,KAChD,CAACqE,EAAmBrE,GAAAA,MAAkB,GAAA,IAAIkE,OACxCG,EAAU7C,MAAMiD,EAAU,KAM5BG,OAAAA,EAAAA,EAAIzF,IAAI,SAAe,EAAA,GAErB0B,IAAc,GAAW,IAAI,GAAdmD,EAAD,GAChB,SACA,QACAa,GAEFC,EAAAA,OAGGC,EAAAA,OAAO,SAAU,EAAA,GACQ,MAAA,KAAlBvF,EAAAA,EAAEI,OAAS,KAAwC,IAAhBvG,CAAAA,IAAAA,KAAAA,QADzB,IAEZmG,EAAAA,EAAEI,OAAS,GAFC,EAAA,GAAA,EAMZJ,GAAAA,GAAAA,EAAAA,EAAEI,OAAS,IANC,EAAA,GAAA,EAUPJ,GAAAA,EAAE0E,OAbf,IAiBG/E,IAAAA,IAAI,SAAO6F,GAAAA,OA9HpB,SAA2E,EAAA,EAAA,EAAA,GAEnEhF,IAAQiF,EAAAA,EAAItD,MAAM,6BAClBuD,GAASlF,EAAM,GACf0D,EAAO1D,EAAM,GAGf,IAIsB,EAAA,OAAA,EAAA,GAAA,IAAjB3G,EAAAA,QAAQ,KAAY,CACvB1B,IAEG,EAAA,OAAA,GAAA,IAAA,KAGA,EAAA,EAAA,MAAA,IAAA,IACA,IAAA,KAKDwE,QAAAA,EAAAA,EACCA,OADMY,EACNZ,GAAoB,GAAA,IAb7B,EAcO,MAAa,OAAiB,GAAA,OAA9B,GAGQ,OACJP,EAAAA,EACLzD,SAASa,gBAAgByD,aACzBhF,OAAOwG,aAAe,GAGjBrC,EACLzD,SAASa,gBAAgBwD,YACzB/E,OAAOuG,YAAc,IAGX,IAdT,EAiCT,EAmDM,CAAA,EAAA,EAAA,EAAA,QAsBAqD,QAAQ,SAAe,EAAA,GACtBA,EAAAA,QAAQ,SAAkB,EAAA,GACvBsC,EADuB,KAEPY,EAAAA,IAAAA,GAA2B,MAAhBY,EAAAA,EAAS,IAAc,EAAI,QAgBhE,ECvFuBvJ,IAAAA,EAAAA,KAAKwJ,IC1DDxJ,EAAAA,KAAVyJ,MAAUzJ,EAAAA,KAAjB0J,MhClBD1J,EAAAA,KAAK2J,IiCHmB,EAAA,oBAAlB,QAAqD,oBAArD,UAAyF,oBCIjG,UAAA,EAAA,WAAA,IAAA,IAAA,EAAA,CAAA,OAAA,UAAA,WAAIhD,EAAI,EAAGA,EAAIiD,EAAsB5F,OAAQ2C,GAAK,EACjDkD,GAAAA,GAAsE,GAA/CC,UAAAA,UAAUrM,QAAQmM,EAA5BG,IACR,OAGJ,EAAA,OAPgB,EAElB,GA+CSC,EAZWH,GAAahO,OAAOoO,QA3B/C,SAAsC,GAChCC,IACG,GAAA,EAAA,OAAM,WAAA,IAAA,GAAA,EAKJD,OAAAA,QAAQE,UAAUC,KAAK,WAAM,GAAA,EAApC,SAOJ,SAAiC,GAC3BC,IACG,GAAA,EAAA,OAAM,WAAA,IAAA,GAAA,EAGE,WAAA,WAAM,GAAA,EAAjB,KAHS,M1C1BTlN,EAAS0M,MAAgBhO,OAAOyO,uBAAwB/N,SAASgO,cACjElJ,EAASwI,GAAa,UAAUhN,KAAKkN,UAAUD,W2CI/CU,EAAAA,SAAAA,EAAAA,GAAAA,KAAAA,aAAAA,GAAAA,MAAAA,IAAAA,UAAAA,sCAAAA,EAAAA,WAAAA,SAAAA,EAAAA,EAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,EAAAA,OAAAA,KAAAA,EAAAA,EAAAA,IAAAA,WAAAA,EAAAA,aAAAA,EAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,UAAAA,GAAAA,OAAAA,eAAAA,EAAAA,EAAAA,IAAAA,GAAAA,OAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,GAAAA,EAAAA,EAAAA,UAAAA,GAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GAAAA,GAAAA,EAAAA,SAAAA,EAAAA,EAAAA,GAAAA,OAAAA,KAAAA,EAAAA,OAAAA,eAAAA,EAAAA,EAAAA,CAAAA,MAAAA,EAAAA,YAAAA,EAAAA,cAAAA,EAAAA,UAAAA,IAAAA,EAAAA,GAAAA,EAAAA,GAAAA,EAAAA,OAAAA,QAAAA,SAAAA,GAAAA,IAAAA,IAAAA,EAAAA,EAAAA,EAAAA,EAAAA,UAAAA,OAAAA,IAAAA,IAAAA,IAAAA,KAAAA,EAAAA,UAAAA,GAAAA,OAAAA,UAAAA,eAAAA,KAAAA,EAAAA,KAAAA,EAAAA,GAAAA,EAAAA,IAAAA,OAAAA,GAAAA,EAAYX,GAAa,WAAWhN,KAAKkN,UAAUD,WNJnDzB,GAAAA,CAAAA,aAAAA,OAAAA,WAAAA,YAAAA,MAAAA,UAAAA,cAAAA,QAAAA,YAAAA,aAAAA,SAAAA,eAAAA,WAAAA,OAAAA,cAAAA,GAAkBoC,GAAW7E,MAAM,GOKnC8E,GACE,OADFA,GAEO,YAFPA,GAGc,mBCCCC,GAS0B,WAAA,SAAA,EAAA,EAAA,GAAdC,IAAAA,EAAAA,KAAAA,EAAc,EAAA,UAAA,aAAA,IAAA,UAAA,GAAA,UAAA,GAAA,GAAA,EAAA,KAAA,GAyF7ClD,KAAAA,eAAiB,WAAMmD,OAAsB,sBAAA,EAAKC,SAvF3CA,KAAAA,OAASC,EAAS,KAAKD,OAAOE,KAAK,OAGnCJ,KAAAA,QAAeD,EAAAA,GAAAA,EAAOM,SALgB,GAQtC/D,KAAAA,MAAQ,CAAA,aAAA,EAAA,WAAA,EAAA,cAAA,IAORlK,KAAAA,UAAYA,GAAaA,EAAUkO,OAASlO,EAAU,GAfhB,EAgBtC8F,KAAAA,OAASA,GAAUA,EAAOoI,OAASpI,EAAO,GAhBJ,EAmBtC8H,KAAAA,QAAQjF,UAnB8B,GAoBpCrC,OAAAA,KACFqH,EAAAA,GAAAA,EAAOM,SAAStF,UAChBiF,EAAQjF,YACVF,QAAQ,SAAQ,GACZmF,EAAAA,QAAQjF,UAEPgF,GAAAA,EAAAA,GAAAA,EAAOM,SAAStF,UAEhBiF,IAAAA,GAAAA,EAAQjF,UAAYiF,EAAQjF,UAA5BiF,GARR,MAaKjF,KAAAA,UAAYtC,OAAOC,KAAK,KAAKsH,QAAQjF,WACvCpC,IAAI,SAEA,GAAA,OAAA,EAAA,CAAA,KAAA,GAAA,EAAKqH,QAAQjF,UAHH,MAMdlC,KAAK,SAAUG,EAAAA,GAAAA,OAAE7F,EAAAA,MAAQ2F,EAAE3F,QAMzB4H,KAAAA,UAAUF,QAAQ,SAAmB,GACpC0F,EAAgBhF,SAAWC,EAAW+E,EAAgBC,SACxCA,EAAAA,OACd,EAAKpO,UACL,EAAK8F,OACL,EAAK8H,QAEL,EAAA,EAAK1D,SAMN4D,KAAAA,SAECrD,IAAgB,EAAA,KAAKmD,QAAQnD,cA5DQ,GA+DpC4D,KAAAA,uBAGFnE,KAAAA,MAAMO,cAKJ,EAAA,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,SAAA,MAAA,WACAqD,OrBjFX,WAEM,IAAA,KAAK5D,MAAMoE,YAIXjF,CAAAA,IAAO,EAAA,CACC,SAAA,KADD,OAAA,GAAA,YAAA,GAAA,WAAA,GAAA,SAAA,EAAA,QAAA,IAUNjG,EAAAA,QAAQpD,UAAYuO,EACvB,KAAKrE,MACL,KAAKpE,OACL,KAAK9F,UACL,KAAK4N,QAAQY,eAMVrH,EAAAA,UAAYsH,EACf,KAAKb,QAAQzG,UACbkC,EAAKjG,QAAQpD,UACb,KAAK8F,OACL,KAAK9F,UACL,KAAK4N,QAAQjF,UAAU+F,KAAKC,kBAC5B,KAAKf,QAAQjF,UAAU+F,KAAK3I,SAIzB6I,EAAAA,kBAAoBvF,EAAKlC,UAEzBqH,EAAAA,cAAgB,KAAKZ,QAAQY,cAG7BpL,EAAAA,QAAQ0C,OAAS+I,EACpB,KAAK/I,OACLuD,EAAKjG,QAAQpD,UACbqJ,EAAKlC,WAGF/D,EAAAA,QAAQ0C,OAAOgJ,SAAW,KAAKlB,QAAQY,cACxC,QACA,WAGGO,EAAAA,EAAa,KAAKpG,UAIpB,GAAA,KAAKuB,MAAM8E,UAITpB,KAAAA,QAAQqB,SAHR/E,IAAAA,KAAAA,MAAM8E,WACNpB,EAAAA,KAAAA,QAAQsB,SChEjB,MoBuFkBvQ,KAAK,QAEX,CAAA,IAAA,UAAA,MAAA,WACDwQ,OlBxFX,WACOjF,OAAAA,KAAAA,MAAMoE,aAGPc,EAAAA,EAAkB,KAAKzG,UAAW,gBAC/B7C,KAAAA,OAAOuJ,gBAAgB,eACvBvJ,KAAAA,OAAOiE,MAAM+E,SAAW,GACxBhJ,KAAAA,OAAOiE,MAAMvH,IAAM,GACnBsD,KAAAA,OAAOiE,MAAMrH,KAAO,GACpBoD,KAAAA,OAAOiE,MAAMpH,MAAQ,GACrBmD,KAAAA,OAAOiE,MAAMtH,OAAS,GACtBqD,KAAAA,OAAOiE,MAAMuF,WAAa,GAC1BxJ,KAAAA,OAAOiE,MAAMwF,EAAyB,cAAgB,IAGxDC,KAAAA,wBAID,KAAK5B,QAAQ6B,iBACV3J,KAAAA,OAAOzG,WAAWqQ,YAAY,KAAK5J,QAEnC,MkBkEUnH,KAAK,QAEC,CAAA,IAAA,uBAAA,MAAA,WACd0P,Of3FX,WACO,KAAKnE,MAAMO,gBACTP,KAAAA,MAAQyF,EACX,KAAK3P,UACL,KAAK4N,QACL,KAAK1D,MACL,KAAKQ,kBeqFqB/L,KAAK,QAEX,CAAA,IAAA,wBAAA,MAAA,WACf6Q,OAAsB7Q,EAAAA,KAAK,UA1FjBgP,EAS0B,GAT1BA,OAoHZiC,GAAAA,OAA2B,oBAAlB,OAAyCC,EAAThR,QAAiBiR,YApH9CnC,GAsHZF,WAtHYE,GAAAA,GAwHZM,SnDlHM,CAKF,UAAA,SALE,eAAA,EAAA,eAAA,EAAA,iBAAA,EAgCH,SAAA,aAUA,SAAA,aoD5BG,UAAA,CASN,MAAA,CAEE,MAAA,IAFF,SAAA,EClCT,GAAA,SAAoC,GAC5B9G,IAAYkC,EAAAA,EAAKlC,UACjB4I,EAAgB5I,EAAUC,MAAM,KAAK,GACrC4I,EAAiB7I,EAAUC,MAAM,KAAK,GAGxB,GAAA,EAAA,CACYiC,IAAAA,EAAAA,EAAKjG,QAA3BpD,EAAAA,EAAAA,UAAW8F,EAAAA,EAAAA,OACbmK,GAA2D,IAA5BxP,CAAAA,SAAAA,OAAAA,QAC/BsB,GAAAA,EAAOkO,EAAa,OAAS,MAC7BhI,EAAcgI,EAAa,QAAU,SAErCC,EAAe,CACFlQ,MAAAA,EAAAA,GAAAA,EAAAA,EADE,IAGTA,IAAAA,EAAAA,GAAAA,EAAAA,EAAkBA,GAAAA,EAAlBA,GAA2C8F,EAHlC,KAOhB1C,EAAAA,QAAQ0C,OAAyBoK,EAAAA,GAAAA,EAAAA,EDejC,IAAA,OAAA,IA+CC,OAAA,CAEC,MAAA,IAFD,SAAA,EAAA,GR8EV,SAAiD,EAAA,GAI3C9M,IAJiCsI,EAAAA,EAAAA,EAAAA,OAC7BvE,EAA8CkC,EAA9ClC,UAA8CkC,EAAAA,EAAnCjG,QAAW0C,EAAAA,EAAAA,OAAQ9F,EAAAA,EAAAA,UAChC+P,EAAgB5I,EAAUC,MAAM,KAAK,GAGvC2D,OAAAA,EAAAA,GAAAA,GACQ,EAAA,EAAU,GAEVoF,EAGU,EAAA,EAAA,EAAA,GAAA,SACb3N,GAAAA,EAAAA,KAAOY,EAAQ,GACfV,EAAAA,MAAQU,EAAQ,IACI,UACpBZ,GAAAA,EAAAA,KAAOY,EAAQ,GACfV,EAAAA,MAAQU,EAAQ,IACI,QACpBV,GAAAA,EAAAA,MAAQU,EAAQ,GAChBZ,EAAAA,KAAOY,EAAQ,IACK,WACpBV,IAAAA,EAAAA,MAAQU,EAAQ,GAChBZ,EAAAA,KAAOY,EAAQ,IAGnB0C,EAAAA,OChHgB9C,EAAAA,GOmBX,OAAA,GAoBO,gBAAA,CAER,MAAA,IAFQ,SAAA,EE3GnB,GAAA,SAAuD,EAAA,GACjD2L,IACFf,EAAAA,EAAQe,mBAAqBjO,EAAgB2I,EAAK+G,SAAStK,QAKzDuD,EAAK+G,SAASpQ,YAPmC,IAQ/BU,EAAAA,EAR+B,IAc/C2P,IAAgBd,EAAAA,EAAyB,aACzCe,EAAejH,EAAK+G,SAAStK,OAAOiE,MAClCvH,EAA0C8N,EAA1C9N,IAAKE,EAAqC4N,EAArC5N,KAAuB6N,EAAcD,EACrC9N,GAAAA,EAAAA,IAAM,GACNE,EAAAA,KAAO,GACU,EAAA,GAAA,GAExB+C,IAAaQ,EAAAA,EACjBoD,EAAK+G,SAAStK,OACduD,EAAK+G,SAASpQ,UACd4N,EAAQ7H,QAERsD,EAAAA,EAAKmF,eAKMhM,EAAAA,IA/BwC,EAgCxCE,EAAAA,KAhCwC,EAAA,EAAA,GAAA,EAmC7C+C,EAAAA,WAnC6C,EAqC/C1E,IAAQ6M,EAAAA,EAAQ4C,SAClB1K,EAASuD,EAAKjG,QAAQ0C,OAEpB2K,EAAQ,CACO,QAAA,SAAA,GACbnE,IAAQxG,EAAAA,EAEVA,GAAAA,OAAoBL,EAAAA,GAAAA,EAApBK,KACC8H,EAAQ8C,sBAED1N,EAAAA,EAAS8C,EAAT9C,GAA4ByC,EAA5BzC,KAPA,EAAA,GAAA,EAAA,IAWS,UAAA,SAAA,GACb+E,IAAyB,EAAA,UAAU,EAAA,OAAS,MAC9CuE,EAAQxG,EAEVA,GAAAA,OAAoBL,EAAAA,GAAAA,EAApBK,KACC8H,EAAQ8C,sBAED1N,EAAAA,EACN8C,EADM9C,GAENyC,EACiB,IAAA,UAAUK,EAAAA,EAAOzC,MAAQyC,EAAOxC,UArB3C,EAAA,GAAA,EAAA,KA4BRmF,OAAAA,EAAAA,QAAQ,SAAa,GACnB1G,IACmC,GAAC,IAAxBtB,CAAAA,OAAAA,OAAAA,QAAwC,GAAA,YAAZ,UACrBgQ,EAAAA,EAAAA,GAAAA,EAAAA,EAH3B,GAAA,MAMKrN,EAAAA,QAAQ0C,OFiCI,EAAA,GAAA,SAAA,CAAA,OAAA,QAAA,MAAA,UAmBN,QAAA,EAMU,kBAAA,gBAYP,aAAA,CAEL,MAAA,IAFK,SAAA,EGpJhB,GAAA,SAA2C,GACXuD,IAAAA,EAAAA,EAAKjG,QAA3B0C,EAAAA,EAAAA,OAAQ9F,EAAAA,EAAAA,UACVmH,EAAYkC,EAAKlC,UAAUC,MAAM,KAAK,GACtCqF,EACAwD,EAAAA,GAAuD,IAAxBxP,CAAAA,MAAAA,UAAAA,QAC/BsB,GAAAA,EAAOkO,EAAa,QAAU,SAC9BU,EAASV,EAAa,OAAS,MAC/BhI,EAAcgI,EAAa,QAAU,SAEvCnK,OAAe2G,EAAAA,GAAAA,EAAMzM,EAANyM,MACZrJ,EAAAA,QAAQ0C,OACX2G,GAAAA,EAAMzM,EAANyM,IAA2B3G,EAE3BA,IAAAA,EAAiB2G,GAAAA,EAAMzM,EAANyM,MACdrJ,EAAAA,QAAQ0C,OAAiB2G,GAAAA,EAAMzM,EAANyM,KHsIlB,IAmBP,MAAA,CAEE,MAAA,IAFF,SAAA,EPlKT,GAAA,SAA6C,EAAA,GAEvC,IAAA,EAAA,IAACmE,EAAmBvH,EAAK+G,SAASzH,UAAW,QAAS,gBAItDkI,OAAAA,EAAAA,IAAejD,EAAAA,EAAQ7O,QAGC,GAAA,iBACXsK,GAAAA,KAAAA,EAAAA,EAAK+G,SAAStK,OAAOgL,cAGhC,IAMA,OAAA,OAAA,IAACzH,EAAK+G,SAAStK,OAAOpE,SAChBuH,GAAAA,OAAAA,QAAAA,KACN,iEAMA9B,EAAAA,IAAYkC,EAAAA,EAAKlC,UAAUC,MAAM,KAAK,GACdiC,EAAAA,EAAKjG,QAA3B0C,EAAAA,EAAAA,OAAQ9F,EAAAA,EAAAA,UACViQ,GAAuD,IAAxBxP,CAAAA,OAAAA,SAAAA,QAE/BsQ,GAAAA,EAAMd,EAAa,SAAW,QAC9Be,EAAkBf,EAAa,MAAQ,OACvClO,EAAOiP,EAAgBC,cACvBC,EAAUjB,EAAa,OAAS,MAChCU,EAASV,EAAa,SAAW,QACjCkB,EAAmBvJ,EAQrB5H,GAAAA,GAAAA,EAAuC8F,GAAAA,EAAAA,EA5CA,KA6CpC1C,EAAAA,QAAQ0C,OACXA,IAAAA,EAAgB9F,IAAAA,EAAhB8F,GAAAA,IAGA9F,EAAqC8F,GAAAA,EAAAA,EAjDE,KAkDpC1C,EAAAA,QAAQ0C,OACX9F,IAAAA,EAAqC8F,GAAAA,EAAAA,EAnDE,IAqDtC1C,EAAAA,QAAQ0C,OAAS3B,EAAckF,EAAKjG,QAAQ0C,QAG3CsL,IAASpR,EAAAA,EAAkBA,GAAAA,EAAiB,GAAA,EAAImR,EAAmB,EAInErS,EAAMW,EAAyB4J,EAAK+G,SAAStK,QAC7CuL,EAAmBvO,WAAWhE,EAAAA,SAAAA,IAC9BwS,EAAmBxO,WAAWhE,EAAAA,SAAAA,EAAAA,UAChCyS,EACFH,EAAS/H,EAAKjG,QAAQ0C,OAAtBsL,GAGUpO,EAAAA,EAAAA,OAAAA,EAAAA,EAASA,EAAS8C,EAAT9C,GAAAA,EAATA,GAA8D,GAErE6N,EAAAA,aACAzN,EAAAA,EAAAA,QAAQoO,OACHxO,EAAAA,EAAAA,GAAAA,EAAAA,EACG,IAAA,EAAA,EAAA,EAAA,IO0FN,GAAA,GAQI,QAAA,aAcL,KAAA,CAEG,MAAA,IAFH,SAAA,EF/KR,GAAA,SAA4C,EAAA,GAEtCoM,GAAAA,EAAkB/F,EAAK+G,SAASzH,UAAW,SAI3CU,OAAAA,EAAAA,GAAAA,EAAKoI,SAAWpI,EAAKlC,YAAckC,EAAKuF,kBAKtCnJ,OAAAA,EAAAA,IAAaQ,EAAAA,EACjBoD,EAAK+G,SAAStK,OACduD,EAAK+G,SAASpQ,UACd4N,EAAQ7H,QACR6H,EAAQe,kBACRtF,EAAKmF,eAGHrH,EAAYkC,EAAKlC,UAAUC,MAAM,KAAK,GACtCsK,EAAoBtJ,EACpBlB,GAAAA,EAAYmC,EAAKlC,UAAUC,MAAM,KAAK,IAAM,GAE5CuK,EAEI/D,GAAAA,OAAAA,EAAQgE,UACTlE,KAAUmE,GACD,EAAA,CAETnE,EAAAA,GAAAA,MAAAA,KAAUoE,GACDC,EAAAA,EAETrE,GAAAA,MAAAA,KAAUsE,GACDD,EAAAA,EAGAnE,GAAAA,GAAAA,MAAAA,QAAAA,EAAAA,EAAQgE,SAGdnJ,OAAAA,EAAAA,QAAQ,SAAiB,EAAA,GAC7BtB,GAAAA,IAAsBwK,GAAAA,EAAU3K,SAAWoE,EAAQ,EAI3C/B,OAAAA,EAAAA,EAAAA,EAAKlC,UAAUC,MAAM,KAAK,GAClBgB,EAAAA,EANa,GAQ3BP,IAAgBwB,EAAAA,EAAKjG,QAAQ0C,OAC7BmM,EAAa5I,EAAKjG,QAAQpD,UAG1ByM,EACAyF,EAAAA,EACW,SACbzF,GAAAA,EAAM5E,EAAclF,OAAS8J,EAAMwF,EAAWvP,OACjC,UACb+J,GAAAA,EAAM5E,EAAcnF,MAAQ+J,EAAMwF,EAAWtP,QAChC,QACb8J,GAAAA,EAAM5E,EAAcpF,QAAUgK,EAAMwF,EAAWzP,MAClC,WACbiK,GAAAA,EAAM5E,EAAcrF,KAAOiK,EAAMwF,EAAWxP,QAE1C0P,EAAgB1F,EAAM5E,EAAcnF,MAAQ+J,EAAMhH,EAAW/C,MAC7D0P,EAAiB3F,EAAM5E,EAAclF,OAAS8J,EAAMhH,EAAW9C,OAC/D0P,EAAe5F,EAAM5E,EAAcrF,KAAOiK,EAAMhH,EAAWjD,KAC3D8P,EACJ7F,EAAM5E,EAAcpF,QAAUgK,EAAMhH,EAAWhD,QAE3C8P,EACW,SACA,GAAA,GAAA,UADdpL,GAAAA,GAEc,QAFdA,GAAAA,GAGc,WAGX8I,GAAAA,EAAAA,GAAuD,IAAxBxP,CAAAA,MAAAA,UAAAA,QAG/B+R,GAAAA,IACF5E,EAAQ6E,iBACRxC,GAA4B,UAA5BA,GACCA,GAAAA,GAA4B,QAA5BA,GADDA,IAE8B,GAAA,UAA7B,GAFDA,IAG8B,GAAA,QAA7B,GAJH,GAOIyC,IACF9E,EAAQ+E,0BACR1C,GAA4B,UAA5BA,GACCA,GAAAA,GAA4B,QAA5BA,GADDA,IAE8B,GAAA,UAA7B,GAFDA,IAG8B,GAAA,QAA7B,GAJH,GAMI2C,EAAmBJ,GAtDQ,GAwD7BN,GAxD6B,GAAA,KA0D1BT,EAAAA,SA1D0B,GA4D3BS,GA5D2B,KA6DjBP,EAAAA,EAAUvG,EAAQ,IAIlByH,IAAAA,ERtHpB,SAAwD,GACpC,MAAA,QADoC,EAE7C,QACgB,UAH6B,EAI7C,MCIX,EO8GoBA,CAjEiB,IAoE1B1L,EAAAA,UAAYA,GAAaD,EAAY,IAAZA,EAA8B,IAIvD9D,EAAAA,QAAQ0C,OACRuD,EAAAA,GAAAA,EAAKjG,QAAQ0C,OACb+I,EACDxF,EAAK+G,SAAStK,OACduD,EAAKjG,QAAQpD,UACbqJ,EAAKlC,YAIF4H,EAAAA,EAAa1F,EAAK+G,SAASzH,UAAiB,EAAA,WEuDjD,GAaM,SAAA,OAKD,QAAA,EAOU,kBAAA,WAzBf,gBAAA,EAAA,yBAAA,GAmDC,MAAA,CAEE,MAAA,IAFF,SAAA,EI7OT,GAAA,SAAoC,GAC5BxB,IAAYkC,EAAAA,EAAKlC,UACjB4I,EAAgB5I,EAAUC,MAAM,KAAK,GACbiC,EAAAA,EAAKjG,QAA3B0C,EAAAA,EAAAA,OAAQ9F,EAAAA,EAAAA,UACV8H,GAAwD,IAA5BrH,CAAAA,OAAAA,SAAAA,QAE5BqS,GAAAA,GAA6D,IAA5BrS,CAAAA,MAAAA,QAAAA,QAEhCqH,GAAAA,OAAAA,EAAAA,EAAU,OAAS,OACxB9H,EACC8S,IAAAA,EAAiBhN,EAAOgC,EAAU,QAAU,UAAY,GAEtDX,EAAAA,UAAYiB,EACZhF,GAAAA,EAAAA,QAAQ0C,OAAS3B,EJgOf,GAAA,IAmBD,KAAA,CAEG,MAAA,IAFH,SAAA,EKhQR,GAAA,SAAmC,GAC7B,IAACyM,EAAmBvH,EAAK+G,SAASzH,UAAW,OAAQ,mBAInDxC,OAAAA,EAAAA,IAAUkD,EAAAA,EAAKjG,QAAQpD,UACvB+S,EAAQxK,EACZc,EAAK+G,SAASzH,UACd,SAA8B,GAAA,MAAA,oBAATY,EAAAA,OACrB9D,WAGAU,GAAAA,EAAQ1D,OAASsQ,EAAMvQ,KACvB2D,EAAQzD,KAAOqQ,EAAMpQ,OACrBwD,EAAQ3D,IAAMuQ,EAAMtQ,QACpB0D,EAAQxD,MAAQoQ,EAAMrQ,KACtB,CAEI2G,IAAAA,IAAK2J,EAAAA,KAIJA,OAAAA,EAAAA,EAAAA,MANL,EAOKC,EAAAA,WAAW,uBAAyB,OACpC,CAED5J,IAAAA,IAAK2J,EAAAA,KAIJA,OAAAA,EAAAA,EAAAA,MANA,EAOAC,EAAAA,WAAW,wBLiOZ,EAAA,OAAA,IAwBQ,aAAA,CAEL,MAAA,IAFK,SAAA,EHlRhB,GAAA,SAAoD,EAAA,GAC1C5L,IAASuG,EAAAA,EAATvG,EAAGE,EAAMqG,EAANrG,EACHzB,EAAWuD,EAAKjG,QAAhB0C,OAGFoN,EAA8B3K,EAClCc,EAAK+G,SAASzH,UACd,SAA8B,GAAA,MAAA,eAATY,EAAAA,OACrB4J,qBACED,IAT8C,GAUxCjK,QAAAA,KACN,iIAsCAvG,IAAMF,EAAAA,EAnCJ2Q,OACJD,IAEItF,EAAAA,EAAQuF,gBAER5S,EAAAA,EAAeG,EAAgB2I,EAAK+G,SAAStK,QAC7CsN,EAAmB5P,EAGnBT,GAAAA,EAAS,CACH+C,SAAAA,EAAOgJ,UAGb1L,EHxBR,SAA6D,EAAA,GAC7BiG,IAAAA,EAAAA,EAAKjG,QAA3B0C,EAAAA,EAAAA,OAAQ9F,EAAAA,EAAAA,UACR0M,EACF2G,EAAAA,EAAU,SAAhB,GAAA,OAAA,GAEMC,EAAiB5G,EAAM1M,EAAUqD,OACjCkQ,EAAc7G,EAAM5G,EAAOzC,OAE3B4M,GAA4D,IAA7BxP,CAAAA,OAAAA,SAAAA,QAAQ4I,EAAKlC,WAC5CqM,GAA+C,IAA5BrM,EAAAA,UAAU1G,QAAQ,KAIrCgT,EAAsB,EAExBxD,GALoBqD,GAAAA,EAAiB,GAAMC,EAAc,EAGjC,EAAA,EAKtBG,EAAAA,EAAoB,EAEnB,EAAA,EAAA,MAAA,CACCD,KAAAA,EAVoC,GAAN,EAAA,GAA+B,GAAN,EAAA,IAW3DE,GACI7N,EAAAA,EAAOpD,KAAO,EACdoD,EAAOpD,MAERgR,IAAAA,EAAkB5N,EAAOtD,KACtBkR,OAAAA,EAAkB5N,EAAOrD,QAC1BgR,MAAAA,EAAoB3N,EAAOnD,QGJpBiR,CAEY,EAAA,EAAnBC,OAAAA,mBAFOD,GAKVhR,EAAc,WAAW,EAAA,MAAQ,SACjCC,EAAc,UAAU,EAAA,OAAS,QAKjCiR,EAAmBvE,EAAyB,aAYpC,GAAA,EAAA,UAGkB,EAAA,SAAbnQ,EAAAA,UACRmB,EAAasD,aAAeT,EAAQX,QAEpC2Q,EAAiB9P,OAASF,EAAQX,OAGrCW,EAAQZ,IAEF,EAAA,SACkB,EAAA,SAAbpD,EAAAA,UACPmB,EAAaqD,YAAcR,EAAQT,OAEnCyQ,EAAiB/P,MAAQD,EAAQT,MAGpCS,EAAQV,KAEbyQ,GAEc,EAAA,EAAA,GAAA,eAAA,EAAA,OAAA,EAAA,SAAA,EAAA,GAAA,EACA,EAAA,GAAA,EACT7D,EAAAA,WAAa,gBACf,CAECyE,IAAsB,EAAA,UAAW,GAAC,EAAI,EACtCC,EAAuB,SAAU,GAAC,EAAI,EAC5BxR,EAAAA,GAAAA,EAJX,EAKWE,EAAAA,GAAAA,EALX,EAME4M,EAAAA,WAAgB1M,EAAAA,KAInBqQ,EAAAA,IAAa,EAAA,CACF5J,cAAAA,EAAKlC,WAIjB8L,OAAAA,EAAAA,WAAiC5J,EAAAA,GAAAA,EAAAA,EAAK4J,YACtClQ,EAAAA,OAAyBsG,EAAAA,GAAAA,EAAAA,EAAKtG,QAC9BkR,EAAAA,YAAmB5K,EAAAA,GAAAA,EAAKjG,QAAQoO,MAAUnI,EAAK4K,aGsLtC,GAAA,iBAAA,EAkBT,EAAA,SAMA,EAAA,SAkBO,WAAA,CAEH,MAAA,IAFG,SAAA,EM9Td,GAAA,SAAyC,GAK7B5K,OAAAA,EAAAA,EAAK+G,SAAStK,OAAQuD,EAAKtG,QCXvC,SAA2D,EAAA,GAClDuD,OAAAA,KAAiBmC,GAAAA,QAAQ,SAAe,IAEzC6D,IADU2G,EACV3G,GAGM+C,EAAAA,gBALmC,GAGnC6E,EAAAA,aAAmBjB,EAAAA,EAH/B,MDcc5J,CAAAA,EAAK+G,SAAStK,OAAQuD,EAAK4J,YAGrC5J,EAAKwH,cAAgBxK,OAAOC,KAAK+C,EAAK4K,aAAajN,QAC3CqC,EAAAA,EAAKwH,aAAcxH,EAAK4K,aNiTxB,GMjSd,OAAA,SAME,EAAA,EAAA,EAAA,EAAA,GAEM9L,IAAmBoG,EAAAA,EAA8CX,EAAAA,EAAAA,EAAAA,EAAQY,eAKzErH,EAAYsH,EAChBb,EAAQzG,UAIRyG,EAAAA,EAAAA,EAAAA,EAAQjF,UAAU+F,KAAKC,kBACvBf,EAAQjF,UAAU+F,KAAK3I,SAGlBmO,OAAAA,EAAAA,aAAa,cAIF,GAAA,EAAA,EAAA,CAAEpF,SAAUlB,EAAQY,cAAgB,QAAU,aNuQpD,GAAA,qBAAA,KpD1TC","file":"popper.min.69384eb2.js","sourceRoot":"..","sourcesContent":["import modifiers from '../modifiers/index';\n\n/**\n * Default options provided to Popper.js constructor.<br />\n * These can be overridden using the `options` argument of Popper.js.<br />\n * To override an option, simply pass an object with the same\n * structure of the `options` object, as the 3rd argument. For example:\n * ```\n * new Popper(ref, pop, {\n *   modifiers: {\n *     preventOverflow: { enabled: false }\n *   }\n * })\n * ```\n * @type {Object}\n * @static\n * @memberof Popper\n */\nexport default {\n  /**\n   * Popper's placement.\n   * @prop {Popper.placements} placement='bottom'\n   */\n  placement: 'bottom',\n\n  /**\n   * Set this to true if you want popper to position it self in 'fixed' mode\n   * @prop {Boolean} positionFixed=false\n   */\n  positionFixed: false,\n\n  /**\n   * Whether events (resize, scroll) are initially enabled.\n   * @prop {Boolean} eventsEnabled=true\n   */\n  eventsEnabled: true,\n\n  /**\n   * Set to true if you want to automatically remove the popper when\n   * you call the `destroy` method.\n   * @prop {Boolean} removeOnDestroy=false\n   */\n  removeOnDestroy: false,\n\n  /**\n   * Callback called when the popper is created.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onCreate}\n   */\n  onCreate: () => {},\n\n  /**\n   * Callback called when the popper is updated. This callback is not called\n   * on the initialization/creation of the popper, but only on subsequent\n   * updates.<br />\n   * By default, it is set to no-op.<br />\n   * Access Popper.js instance with `data.instance`.\n   * @prop {onUpdate}\n   */\n  onUpdate: () => {},\n\n  /**\n   * List of modifiers used to modify the offsets before they are applied to the popper.\n   * They provide most of the functionalities of Popper.js.\n   * @prop {modifiers}\n   */\n  modifiers,\n};\n\n/**\n * @callback onCreate\n * @param {dataObject} data\n */\n\n/**\n * @callback onUpdate\n * @param {dataObject} data\n */\n","/**\n * Check if the given variable is a function\n * @method\n * @memberof Popper.Utils\n * @argument {Any} functionToCheck - variable to check\n * @returns {Boolean} answer to: is a function?\n */\nexport default function isFunction(functionToCheck) {\n  const getType = {};\n  return (\n    functionToCheck &&\n    getType.toString.call(functionToCheck) === '[object Function]'\n  );\n}\n","/**\n * Get CSS computed property of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Eement} element\n * @argument {String} property\n */\nexport default function getStyleComputedProperty(element, property) {\n  if (element.nodeType !== 1) {\n    return [];\n  }\n  // NOTE: 1 DOM access here\n  const window = element.ownerDocument.defaultView;\n  const css = window.getComputedStyle(element, null);\n  return property ? css[property] : css;\n}\n","/**\n * Returns the parentNode or the host of the element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} parent\n */\nexport default function getParentNode(element) {\n  if (element.nodeName === 'HTML') {\n    return element;\n  }\n  return element.parentNode || element.host;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Returns the scrolling parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} scroll parent\n */\nexport default function getScrollParent(element) {\n  // Return body, `getScroll` will take care to get the correct `scrollTop` from it\n  if (!element) {\n    return document.body\n  }\n\n  switch (element.nodeName) {\n    case 'HTML':\n    case 'BODY':\n      return element.ownerDocument.body\n    case '#document':\n      return element.body\n  }\n\n  // Firefox want us to check `-x` and `-y` variations as well\n  const { overflow, overflowX, overflowY } = getStyleComputedProperty(element);\n  if (/(auto|scroll|overlay)/.test(overflow + overflowY + overflowX)) {\n    return element;\n  }\n\n  return getScrollParent(getParentNode(element));\n}\n","/**\n * Returns the reference node of the reference object, or the reference object itself.\n * @method\n * @memberof Popper.Utils\n * @param {Element|Object} reference - the reference element (the popper will be relative to this)\n * @returns {Element} parent\n */\nexport default function getReferenceNode(reference) {\n  return reference && reference.referenceNode ? reference.referenceNode : reference;\n}\n","import isBrowser from './isBrowser';\n\nconst isIE11 = isBrowser && !!(window.MSInputMethodContext && document.documentMode);\nconst isIE10 = isBrowser && /MSIE 10/.test(navigator.userAgent);\n\n/**\n * Determines if the browser is Internet Explorer\n * @method\n * @memberof Popper.Utils\n * @param {Number} version to check\n * @returns {Boolean} isIE\n */\nexport default function isIE(version) {\n  if (version === 11) {\n    return isIE11;\n  }\n  if (version === 10) {\n    return isIE10;\n  }\n  return isIE11 || isIE10;\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Returns the offset parent of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} offset parent\n */\nexport default function getOffsetParent(element) {\n  if (!element) {\n    return document.documentElement;\n  }\n\n  const noOffsetParent = isIE(10) ? document.body : null;\n\n  // NOTE: 1 DOM access here\n  let offsetParent = element.offsetParent || null;\n  // Skip hidden elements which don't have an offsetParent\n  while (offsetParent === noOffsetParent && element.nextElementSibling) {\n    offsetParent = (element = element.nextElementSibling).offsetParent;\n  }\n\n  const nodeName = offsetParent && offsetParent.nodeName;\n\n  if (!nodeName || nodeName === 'BODY' || nodeName === 'HTML') {\n    return element ? element.ownerDocument.documentElement : document.documentElement;\n  }\n\n  // .offsetParent will return the closest TH, TD or TABLE in case\n  // no offsetParent is present, I hate this job...\n  if (\n    ['TH', 'TD', 'TABLE'].indexOf(offsetParent.nodeName) !== -1 &&\n    getStyleComputedProperty(offsetParent, 'position') === 'static'\n  ) {\n    return getOffsetParent(offsetParent);\n  }\n\n  return offsetParent;\n}\n","/**\n * Finds the root node (document, shadowDOM root) of the given element\n * @method\n * @memberof Popper.Utils\n * @argument {Element} node\n * @returns {Element} root node\n */\nexport default function getRoot(node) {\n  if (node.parentNode !== null) {\n    return getRoot(node.parentNode);\n  }\n\n  return node;\n}\n","import isOffsetContainer from './isOffsetContainer';\nimport getRoot from './getRoot';\nimport getOffsetParent from './getOffsetParent';\n\n/**\n * Finds the offset parent common to the two provided nodes\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element1\n * @argument {Element} element2\n * @returns {Element} common offset parent\n */\nexport default function findCommonOffsetParent(element1, element2) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n  if (!element1 || !element1.nodeType || !element2 || !element2.nodeType) {\n    return document.documentElement;\n  }\n\n  // Here we make sure to give as \"start\" the element that comes first in the DOM\n  const order =\n    element1.compareDocumentPosition(element2) &\n    Node.DOCUMENT_POSITION_FOLLOWING;\n  const start = order ? element1 : element2;\n  const end = order ? element2 : element1;\n\n  // Get common ancestor container\n  const range = document.createRange();\n  range.setStart(start, 0);\n  range.setEnd(end, 0);\n  const { commonAncestorContainer } = range;\n\n  // Both nodes are inside #document\n  if (\n    (element1 !== commonAncestorContainer &&\n      element2 !== commonAncestorContainer) ||\n    start.contains(end)\n  ) {\n    if (isOffsetContainer(commonAncestorContainer)) {\n      return commonAncestorContainer;\n    }\n\n    return getOffsetParent(commonAncestorContainer);\n  }\n\n  // one of the nodes is inside shadowDOM, find which one\n  const element1root = getRoot(element1);\n  if (element1root.host) {\n    return findCommonOffsetParent(element1root.host, element2);\n  } else {\n    return findCommonOffsetParent(element1, getRoot(element2).host);\n  }\n}\n","import getOffsetParent from './getOffsetParent';\n\nexport default function isOffsetContainer(element) {\n  const { nodeName } = element;\n  if (nodeName === 'BODY') {\n    return false;\n  }\n  return (\n    nodeName === 'HTML' || getOffsetParent(element.firstElementChild) === element\n  );\n}\n","/**\n * Gets the scroll value of the given element in the given side (top and left)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {String} side `top` or `left`\n * @returns {number} amount of scrolled pixels\n */\nexport default function getScroll(element, side = 'top') {\n  const upperSide = side === 'top' ? 'scrollTop' : 'scrollLeft';\n  const nodeName = element.nodeName;\n\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    const html = element.ownerDocument.documentElement;\n    const scrollingElement = element.ownerDocument.scrollingElement || html;\n    return scrollingElement[upperSide];\n  }\n\n  return element[upperSide];\n}\n","import getScroll from './getScroll';\n\n/*\n * Sum or subtract the element scroll values (left and top) from a given rect object\n * @method\n * @memberof Popper.Utils\n * @param {Object} rect - Rect object you want to change\n * @param {HTMLElement} element - The element from the function reads the scroll values\n * @param {Boolean} subtract - set to true if you want to subtract the scroll values\n * @return {Object} rect - The modifier rect object\n */\nexport default function includeScroll(rect, element, subtract = false) {\n  const scrollTop = getScroll(element, 'top');\n  const scrollLeft = getScroll(element, 'left');\n  const modifier = subtract ? -1 : 1;\n  rect.top += scrollTop * modifier;\n  rect.bottom += scrollTop * modifier;\n  rect.left += scrollLeft * modifier;\n  rect.right += scrollLeft * modifier;\n  return rect;\n}\n","/*\n * Helper to detect borders of a given element\n * @method\n * @memberof Popper.Utils\n * @param {CSSStyleDeclaration} styles\n * Result of `getStyleComputedProperty` on the given element\n * @param {String} axis - `x` or `y`\n * @return {number} borders - The borders size of the given axis\n */\n\nexport default function getBordersSize(styles, axis) {\n  const sideA = axis === 'x' ? 'Left' : 'Top';\n  const sideB = sideA === 'Left' ? 'Right' : 'Bottom';\n\n  return (\n    parseFloat(styles[`border${sideA}Width`]) +\n    parseFloat(styles[`border${sideB}Width`])\n  );\n}\n","import isIE from './isIE';\n\nfunction getSize(axis, body, html, computedStyle) {\n  return Math.max(\n    body[`offset${axis}`],\n    body[`scroll${axis}`],\n    html[`client${axis}`],\n    html[`offset${axis}`],\n    html[`scroll${axis}`],\n    isIE(10)\n      ? (parseInt(html[`offset${axis}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Top' : 'Left'}`]) + \n      parseInt(computedStyle[`margin${axis === 'Height' ? 'Bottom' : 'Right'}`]))\n    : 0 \n  );\n}\n\nexport default function getWindowSizes(document) {\n  const body = document.body;\n  const html = document.documentElement;\n  const computedStyle = isIE(10) && getComputedStyle(html);\n\n  return {\n    height: getSize('Height', body, html, computedStyle),\n    width: getSize('Width', body, html, computedStyle),\n  };\n}\n","/**\n * Given element offsets, generate an output similar to getBoundingClientRect\n * @method\n * @memberof Popper.Utils\n * @argument {Object} offsets\n * @returns {Object} ClientRect like output\n */\nexport default function getClientRect(offsets) {\n  return {\n    ...offsets,\n    right: offsets.left + offsets.width,\n    bottom: offsets.top + offsets.height,\n  };\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getBordersSize from './getBordersSize';\nimport getWindowSizes from './getWindowSizes';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\nimport isIE from './isIE';\n\n/**\n * Get bounding client rect of given element\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} element\n * @return {Object} client rect\n */\nexport default function getBoundingClientRect(element) {\n  let rect = {};\n\n  // IE10 10 FIX: Please, don't ask, the element isn't\n  // considered in DOM in some circumstances...\n  // This isn't reproducible in IE10 compatibility mode of IE11\n  try {\n    if (isIE(10)) {\n      rect = element.getBoundingClientRect();\n      const scrollTop = getScroll(element, 'top');\n      const scrollLeft = getScroll(element, 'left');\n      rect.top += scrollTop;\n      rect.left += scrollLeft;\n      rect.bottom += scrollTop;\n      rect.right += scrollLeft;\n    }\n    else {\n      rect = element.getBoundingClientRect();\n    }\n  }\n  catch(e){}\n\n  const result = {\n    left: rect.left,\n    top: rect.top,\n    width: rect.right - rect.left,\n    height: rect.bottom - rect.top,\n  };\n\n  // subtract scrollbar size from sizes\n  const sizes = element.nodeName === 'HTML' ? getWindowSizes(element.ownerDocument) : {};\n  const width =\n    sizes.width || element.clientWidth || result.width;\n  const height =\n    sizes.height || element.clientHeight || result.height;\n\n  let horizScrollbar = element.offsetWidth - width;\n  let vertScrollbar = element.offsetHeight - height;\n\n  // if an hypothetical scrollbar is detected, we must be sure it's not a `border`\n  // we make this check conditional for performance reasons\n  if (horizScrollbar || vertScrollbar) {\n    const styles = getStyleComputedProperty(element);\n    horizScrollbar -= getBordersSize(styles, 'x');\n    vertScrollbar -= getBordersSize(styles, 'y');\n\n    result.width -= horizScrollbar;\n    result.height -= vertScrollbar;\n  }\n\n  return getClientRect(result);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport includeScroll from './includeScroll';\nimport getScrollParent from './getScrollParent';\nimport getBoundingClientRect from './getBoundingClientRect';\nimport runIsIE from './isIE';\nimport getClientRect from './getClientRect';\n\nexport default function getOffsetRectRelativeToArbitraryNode(children, parent, fixedPosition = false) {\n  const isIE10 = runIsIE(10);\n  const isHTML = parent.nodeName === 'HTML';\n  const childrenRect = getBoundingClientRect(children);\n  const parentRect = getBoundingClientRect(parent);\n  const scrollParent = getScrollParent(children);\n\n  const styles = getStyleComputedProperty(parent);\n  const borderTopWidth = parseFloat(styles.borderTopWidth);\n  const borderLeftWidth = parseFloat(styles.borderLeftWidth);\n\n  // In cases where the parent is fixed, we must ignore negative scroll in offset calc\n  if(fixedPosition && isHTML) {\n    parentRect.top = Math.max(parentRect.top, 0);\n    parentRect.left = Math.max(parentRect.left, 0);\n  }\n  let offsets = getClientRect({\n    top: childrenRect.top - parentRect.top - borderTopWidth,\n    left: childrenRect.left - parentRect.left - borderLeftWidth,\n    width: childrenRect.width,\n    height: childrenRect.height,\n  });\n  offsets.marginTop = 0;\n  offsets.marginLeft = 0;\n\n  // Subtract margins of documentElement in case it's being used as parent\n  // we do this only on HTML because it's the only element that behaves\n  // differently when margins are applied to it. The margins are included in\n  // the box of the documentElement, in the other cases not.\n  if (!isIE10 && isHTML) {\n    const marginTop = parseFloat(styles.marginTop);\n    const marginLeft = parseFloat(styles.marginLeft);\n\n    offsets.top -= borderTopWidth - marginTop;\n    offsets.bottom -= borderTopWidth - marginTop;\n    offsets.left -= borderLeftWidth - marginLeft;\n    offsets.right -= borderLeftWidth - marginLeft;\n\n    // Attach marginTop and marginLeft because in some circumstances we may need them\n    offsets.marginTop = marginTop;\n    offsets.marginLeft = marginLeft;\n  }\n\n  if (\n    isIE10 && !fixedPosition\n      ? parent.contains(scrollParent)\n      : parent === scrollParent && scrollParent.nodeName !== 'BODY'\n  ) {\n    offsets = includeScroll(offsets, parent);\n  }\n\n  return offsets;\n}\n","import getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getScroll from './getScroll';\nimport getClientRect from './getClientRect';\n\nexport default function getViewportOffsetRectRelativeToArtbitraryNode(element, excludeScroll = false) {\n  const html = element.ownerDocument.documentElement;\n  const relativeOffset = getOffsetRectRelativeToArbitraryNode(element, html);\n  const width = Math.max(html.clientWidth, window.innerWidth || 0);\n  const height = Math.max(html.clientHeight, window.innerHeight || 0);\n\n  const scrollTop = !excludeScroll ? getScroll(html) : 0;\n  const scrollLeft = !excludeScroll ? getScroll(html, 'left') : 0;\n\n  const offset = {\n    top: scrollTop - relativeOffset.top + relativeOffset.marginTop,\n    left: scrollLeft - relativeOffset.left + relativeOffset.marginLeft,\n    width,\n    height,\n  };\n\n  return getClientRect(offset);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport getParentNode from './getParentNode';\n\n/**\n * Check if the given element is fixed or is inside a fixed parent\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @argument {Element} customContainer\n * @returns {Boolean} answer to \"isFixed?\"\n */\nexport default function isFixed(element) {\n  const nodeName = element.nodeName;\n  if (nodeName === 'BODY' || nodeName === 'HTML') {\n    return false;\n  }\n  if (getStyleComputedProperty(element, 'position') === 'fixed') {\n    return true;\n  }\n  const parentNode = getParentNode(element);\n  if (!parentNode) {\n    return false;\n  }\n  return isFixed(parentNode);\n}\n","import getStyleComputedProperty from './getStyleComputedProperty';\nimport isIE from './isIE';\n/**\n * Finds the first parent of an element that has a transformed property defined\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Element} first transformed parent or documentElement\n */\n\nexport default function getFixedPositionOffsetParent(element) {\n  // This check is needed to avoid errors in case one of the elements isn't defined for any reason\n   if (!element || !element.parentElement || isIE()) {\n    return document.documentElement;\n  }\n  let el = element.parentElement;\n  while (el && getStyleComputedProperty(el, 'transform') === 'none') {\n    el = el.parentElement;\n  }\n  return el || document.documentElement;\n\n}\n","import getScrollParent from './getScrollParent';\nimport getParentNode from './getParentNode';\nimport getReferenceNode from './getReferenceNode';\nimport findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getViewportOffsetRectRelativeToArtbitraryNode from './getViewportOffsetRectRelativeToArtbitraryNode';\nimport getWindowSizes from './getWindowSizes';\nimport isFixed from './isFixed';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\n\n/**\n * Computed the boundaries limits and return them\n * @method\n * @memberof Popper.Utils\n * @param {HTMLElement} popper\n * @param {HTMLElement} reference\n * @param {number} padding\n * @param {HTMLElement} boundariesElement - Element used to define the boundaries\n * @param {Boolean} fixedPosition - Is in fixed position mode\n * @returns {Object} Coordinates of the boundaries\n */\nexport default function getBoundaries(\n  popper,\n  reference,\n  padding,\n  boundariesElement,\n  fixedPosition = false\n) {\n  // NOTE: 1 DOM access here\n\n  let boundaries = { top: 0, left: 0 };\n  const offsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n\n  // Handle viewport case\n  if (boundariesElement === 'viewport' ) {\n    boundaries = getViewportOffsetRectRelativeToArtbitraryNode(offsetParent, fixedPosition);\n  }\n\n  else {\n    // Handle other cases based on DOM element used as boundaries\n    let boundariesNode;\n    if (boundariesElement === 'scrollParent') {\n      boundariesNode = getScrollParent(getParentNode(reference));\n      if (boundariesNode.nodeName === 'BODY') {\n        boundariesNode = popper.ownerDocument.documentElement;\n      }\n    } else if (boundariesElement === 'window') {\n      boundariesNode = popper.ownerDocument.documentElement;\n    } else {\n      boundariesNode = boundariesElement;\n    }\n\n    const offsets = getOffsetRectRelativeToArbitraryNode(\n      boundariesNode,\n      offsetParent,\n      fixedPosition\n    );\n\n    // In case of HTML, we need a different computation\n    if (boundariesNode.nodeName === 'HTML' && !isFixed(offsetParent)) {\n      const { height, width } = getWindowSizes(popper.ownerDocument);\n      boundaries.top += offsets.top - offsets.marginTop;\n      boundaries.bottom = height + offsets.top;\n      boundaries.left += offsets.left - offsets.marginLeft;\n      boundaries.right = width + offsets.left;\n    } else {\n      // for all the other DOM elements, this one is good\n      boundaries = offsets;\n    }\n  }\n\n  // Add paddings\n  padding = padding || 0;\n  const isPaddingNumber = typeof padding === 'number';\n  boundaries.left += isPaddingNumber ? padding : padding.left || 0; \n  boundaries.top += isPaddingNumber ? padding : padding.top || 0; \n  boundaries.right -= isPaddingNumber ? padding : padding.right || 0; \n  boundaries.bottom -= isPaddingNumber ? padding : padding.bottom || 0; \n\n  return boundaries;\n}\n","import getBoundaries from '../utils/getBoundaries';\n\nfunction getArea({ width, height }) {\n  return width * height;\n}\n\n/**\n * Utility used to transform the `auto` placement to the placement with more\n * available space.\n * @method\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeAutoPlacement(\n  placement,\n  refRect,\n  popper,\n  reference,\n  boundariesElement,\n  padding = 0\n) {\n  if (placement.indexOf('auto') === -1) {\n    return placement;\n  }\n\n  const boundaries = getBoundaries(\n    popper,\n    reference,\n    padding,\n    boundariesElement\n  );\n\n  const rects = {\n    top: {\n      width: boundaries.width,\n      height: refRect.top - boundaries.top,\n    },\n    right: {\n      width: boundaries.right - refRect.right,\n      height: boundaries.height,\n    },\n    bottom: {\n      width: boundaries.width,\n      height: boundaries.bottom - refRect.bottom,\n    },\n    left: {\n      width: refRect.left - boundaries.left,\n      height: boundaries.height,\n    },\n  };\n\n  const sortedAreas = Object.keys(rects)\n    .map(key => ({\n      key,\n      ...rects[key],\n      area: getArea(rects[key]),\n    }))\n    .sort((a, b) => b.area - a.area);\n\n  const filteredAreas = sortedAreas.filter(\n    ({ width, height }) =>\n      width >= popper.clientWidth && height >= popper.clientHeight\n  );\n\n  const computedPlacement = filteredAreas.length > 0\n    ? filteredAreas[0].key\n    : sortedAreas[0].key;\n\n  const variation = placement.split('-')[1];\n\n  return computedPlacement + (variation ? `-${variation}` : '');\n}\n","import findCommonOffsetParent from './findCommonOffsetParent';\nimport getOffsetRectRelativeToArbitraryNode from './getOffsetRectRelativeToArbitraryNode';\nimport getFixedPositionOffsetParent from './getFixedPositionOffsetParent';\nimport getReferenceNode from './getReferenceNode';\n\n/**\n * Get offsets to the reference element\n * @method\n * @memberof Popper.Utils\n * @param {Object} state\n * @param {Element} popper - the popper element\n * @param {Element} reference - the reference element (the popper will be relative to this)\n * @param {Element} fixedPosition - is in fixed position mode\n * @returns {Object} An object containing the offsets which will be applied to the popper\n */\nexport default function getReferenceOffsets(state, popper, reference, fixedPosition = null) {\n  const commonOffsetParent = fixedPosition ? getFixedPositionOffsetParent(popper) : findCommonOffsetParent(popper, getReferenceNode(reference));\n  return getOffsetRectRelativeToArbitraryNode(reference, commonOffsetParent, fixedPosition);\n}\n","/**\n * Get the outer sizes of the given element (offset size + margins)\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element\n * @returns {Object} object containing width and height properties\n */\nexport default function getOuterSizes(element) {\n  const window = element.ownerDocument.defaultView;\n  const styles = window.getComputedStyle(element);\n  const x = parseFloat(styles.marginTop || 0) + parseFloat(styles.marginBottom || 0);\n  const y = parseFloat(styles.marginLeft || 0) + parseFloat(styles.marginRight || 0);\n  const result = {\n    width: element.offsetWidth + y,\n    height: element.offsetHeight + x,\n  };\n  return result;\n}\n","/**\n * Get the opposite placement of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement\n * @returns {String} flipped placement\n */\nexport default function getOppositePlacement(placement) {\n  const hash = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };\n  return placement.replace(/left|right|bottom|top/g, matched => hash[matched]);\n}\n","import getOuterSizes from './getOuterSizes';\nimport getOppositePlacement from './getOppositePlacement';\n\n/**\n * Get offsets to the popper\n * @method\n * @memberof Popper.Utils\n * @param {Object} position - CSS position the Popper will get applied\n * @param {HTMLElement} popper - the popper element\n * @param {Object} referenceOffsets - the reference offsets (the popper will be relative to this)\n * @param {String} placement - one of the valid placement options\n * @returns {Object} popperOffsets - An object containing the offsets which will be applied to the popper\n */\nexport default function getPopperOffsets(popper, referenceOffsets, placement) {\n  placement = placement.split('-')[0];\n\n  // Get popper node sizes\n  const popperRect = getOuterSizes(popper);\n\n  // Add position, width and height to our offsets object\n  const popperOffsets = {\n    width: popperRect.width,\n    height: popperRect.height,\n  };\n\n  // depending by the popper placement we have to compute its offsets slightly differently\n  const isHoriz = ['right', 'left'].indexOf(placement) !== -1;\n  const mainSide = isHoriz ? 'top' : 'left';\n  const secondarySide = isHoriz ? 'left' : 'top';\n  const measurement = isHoriz ? 'height' : 'width';\n  const secondaryMeasurement = !isHoriz ? 'height' : 'width';\n\n  popperOffsets[mainSide] =\n    referenceOffsets[mainSide] +\n    referenceOffsets[measurement] / 2 -\n    popperRect[measurement] / 2;\n  if (placement === secondarySide) {\n    popperOffsets[secondarySide] =\n      referenceOffsets[secondarySide] - popperRect[secondaryMeasurement];\n  } else {\n    popperOffsets[secondarySide] =\n      referenceOffsets[getOppositePlacement(secondarySide)];\n  }\n\n  return popperOffsets;\n}\n","/**\n * Mimics the `find` method of Array\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function find(arr, check) {\n  // use native find if supported\n  if (Array.prototype.find) {\n    return arr.find(check);\n  }\n\n  // use `filter` to obtain the same behavior of `find`\n  return arr.filter(check)[0];\n}\n","import isFunction from './isFunction';\nimport findIndex from './findIndex';\nimport getClientRect from '../utils/getClientRect';\n\n/**\n * Loop trough the list of modifiers and run them in order,\n * each of them will then edit the data object.\n * @method\n * @memberof Popper.Utils\n * @param {dataObject} data\n * @param {Array} modifiers\n * @param {String} ends - Optional modifier name used as stopper\n * @returns {dataObject}\n */\nexport default function runModifiers(modifiers, data, ends) {\n  const modifiersToRun = ends === undefined\n    ? modifiers\n    : modifiers.slice(0, findIndex(modifiers, 'name', ends));\n\n  modifiersToRun.forEach(modifier => {\n    if (modifier['function']) { // eslint-disable-line dot-notation\n      console.warn('`modifier.function` is deprecated, use `modifier.fn`!');\n    }\n    const fn = modifier['function'] || modifier.fn; // eslint-disable-line dot-notation\n    if (modifier.enabled && isFunction(fn)) {\n      // Add properties to offsets to make them a complete clientRect object\n      // we do this before each modifier to make sure the previous one doesn't\n      // mess with these values\n      data.offsets.popper = getClientRect(data.offsets.popper);\n      data.offsets.reference = getClientRect(data.offsets.reference);\n\n      data = fn(data, modifier);\n    }\n  });\n\n  return data;\n}\n","import find from './find';\n\n/**\n * Return the index of the matching object\n * @method\n * @memberof Popper.Utils\n * @argument {Array} arr\n * @argument prop\n * @argument value\n * @returns index or -1\n */\nexport default function findIndex(arr, prop, value) {\n  // use native findIndex if supported\n  if (Array.prototype.findIndex) {\n    return arr.findIndex(cur => cur[prop] === value);\n  }\n\n  // use `find` + `indexOf` if `findIndex` isn't supported\n  const match = find(arr, obj => obj[prop] === value);\n  return arr.indexOf(match);\n}\n","import computeAutoPlacement from '../utils/computeAutoPlacement';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\n\n/**\n * Updates the position of the popper, computing the new offsets and applying\n * the new style.<br />\n * Prefer `scheduleUpdate` over `update` because of performance reasons.\n * @method\n * @memberof Popper\n */\nexport default function update() {\n  // if popper is destroyed, don't perform any further update\n  if (this.state.isDestroyed) {\n    return;\n  }\n\n  let data = {\n    instance: this,\n    styles: {},\n    arrowStyles: {},\n    attributes: {},\n    flipped: false,\n    offsets: {},\n  };\n\n  // compute reference element offsets\n  data.offsets.reference = getReferenceOffsets(\n    this.state,\n    this.popper,\n    this.reference,\n    this.options.positionFixed\n  );\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  data.placement = computeAutoPlacement(\n    this.options.placement,\n    data.offsets.reference,\n    this.popper,\n    this.reference,\n    this.options.modifiers.flip.boundariesElement,\n    this.options.modifiers.flip.padding\n  );\n\n  // store the computed placement inside `originalPlacement`\n  data.originalPlacement = data.placement;\n\n  data.positionFixed = this.options.positionFixed;\n\n  // compute the popper offsets\n  data.offsets.popper = getPopperOffsets(\n    this.popper,\n    data.offsets.reference,\n    data.placement\n  );\n\n  data.offsets.popper.position = this.options.positionFixed\n    ? 'fixed'\n    : 'absolute';\n\n  // run the modifiers\n  data = runModifiers(this.modifiers, data);\n\n  // the first `update` will call `onCreate` callback\n  // the other ones will call `onUpdate` callback\n  if (!this.state.isCreated) {\n    this.state.isCreated = true;\n    this.options.onCreate(data);\n  } else {\n    this.options.onUpdate(data);\n  }\n}\n","/**\n * Helper used to know if the given modifier is enabled.\n * @method\n * @memberof Popper.Utils\n * @returns {Boolean}\n */\nexport default function isModifierEnabled(modifiers, modifierName) {\n  return modifiers.some(\n    ({ name, enabled }) => enabled && name === modifierName\n  );\n}\n","/**\n * Get the prefixed supported property name\n * @method\n * @memberof Popper.Utils\n * @argument {String} property (camelCase)\n * @returns {String} prefixed property (camelCase or PascalCase, depending on the vendor prefix)\n */\nexport default function getSupportedPropertyName(property) {\n  const prefixes = [false, 'ms', 'Webkit', 'Moz', 'O'];\n  const upperProp = property.charAt(0).toUpperCase() + property.slice(1);\n\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefix = prefixes[i];\n    const toCheck = prefix ? `${prefix}${upperProp}` : property;\n    if (typeof document.body.style[toCheck] !== 'undefined') {\n      return toCheck;\n    }\n  }\n  return null;\n}\n","import isModifierEnabled from '../utils/isModifierEnabled';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * Destroys the popper.\n * @method\n * @memberof Popper\n */\nexport default function destroy() {\n  this.state.isDestroyed = true;\n\n  // touch DOM only if `applyStyle` modifier is enabled\n  if (isModifierEnabled(this.modifiers, 'applyStyle')) {\n    this.popper.removeAttribute('x-placement');\n    this.popper.style.position = '';\n    this.popper.style.top = '';\n    this.popper.style.left = '';\n    this.popper.style.right = '';\n    this.popper.style.bottom = '';\n    this.popper.style.willChange = '';\n    this.popper.style[getSupportedPropertyName('transform')] = '';\n  }\n\n  this.disableEventListeners();\n\n  // remove the popper if user explicitly asked for the deletion on destroy\n  // do not use `remove` because IE11 doesn't support it\n  if (this.options.removeOnDestroy) {\n    this.popper.parentNode.removeChild(this.popper);\n  }\n  return this;\n}\n","/**\n * Get the window associated with the element\n * @argument {Element} element\n * @returns {Window}\n */\nexport default function getWindow(element) {\n  const ownerDocument = element.ownerDocument;\n  return ownerDocument ? ownerDocument.defaultView : window;\n}\n","import getScrollParent from './getScrollParent';\nimport getWindow from './getWindow';\n\nfunction attachToScrollParents(scrollParent, event, callback, scrollParents) {\n  const isBody = scrollParent.nodeName === 'BODY';\n  const target = isBody ? scrollParent.ownerDocument.defaultView : scrollParent;\n  target.addEventListener(event, callback, { passive: true });\n\n  if (!isBody) {\n    attachToScrollParents(\n      getScrollParent(target.parentNode),\n      event,\n      callback,\n      scrollParents\n    );\n  }\n  scrollParents.push(target);\n}\n\n/**\n * Setup needed event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function setupEventListeners(\n  reference,\n  options,\n  state,\n  updateBound\n) {\n  // Resize event listener on window\n  state.updateBound = updateBound;\n  getWindow(reference).addEventListener('resize', state.updateBound, { passive: true });\n\n  // Scroll event listener on scroll parents\n  const scrollElement = getScrollParent(reference);\n  attachToScrollParents(\n    scrollElement,\n    'scroll',\n    state.updateBound,\n    state.scrollParents\n  );\n  state.scrollElement = scrollElement;\n  state.eventsEnabled = true;\n\n  return state;\n}\n","import setupEventListeners from '../utils/setupEventListeners';\n\n/**\n * It will add resize/scroll events and start recalculating\n * position of the popper element when they are triggered.\n * @method\n * @memberof Popper\n */\nexport default function enableEventListeners() {\n  if (!this.state.eventsEnabled) {\n    this.state = setupEventListeners(\n      this.reference,\n      this.options,\n      this.state,\n      this.scheduleUpdate\n    );\n  }\n}\n","import removeEventListeners from '../utils/removeEventListeners';\n\n/**\n * It will remove resize/scroll events and won't recalculate popper position\n * when they are triggered. It also won't trigger `onUpdate` callback anymore,\n * unless you call `update` method manually.\n * @method\n * @memberof Popper\n */\nexport default function disableEventListeners() {\n  if (this.state.eventsEnabled) {\n    cancelAnimationFrame(this.scheduleUpdate);\n    this.state = removeEventListeners(this.reference, this.state);\n  }\n}\n","import getWindow from './getWindow';\n\n/**\n * Remove event listeners used to update the popper position\n * @method\n * @memberof Popper.Utils\n * @private\n */\nexport default function removeEventListeners(reference, state) {\n  // Remove resize event listener on window\n  getWindow(reference).removeEventListener('resize', state.updateBound);\n\n  // Remove scroll event listener on scroll parents\n  state.scrollParents.forEach(target => {\n    target.removeEventListener('scroll', state.updateBound);\n  });\n\n  // Reset state\n  state.updateBound = null;\n  state.scrollParents = [];\n  state.scrollElement = null;\n  state.eventsEnabled = false;\n  return state;\n}\n","/**\n * Tells if a given input is a number\n * @method\n * @memberof Popper.Utils\n * @param {*} input to check\n * @return {Boolean}\n */\nexport default function isNumeric(n) {\n  return n !== '' && !isNaN(parseFloat(n)) && isFinite(n);\n}\n","import isNumeric from './isNumeric';\n\n/**\n * Set the style to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the style to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setStyles(element, styles) {\n  Object.keys(styles).forEach(prop => {\n    let unit = '';\n    // add unit if the value is numeric and is one of the following\n    if (\n      ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(prop) !==\n        -1 &&\n      isNumeric(styles[prop])\n    ) {\n      unit = 'px';\n    }\n    element.style[prop] = styles[prop] + unit;\n  });\n}\n","import find from './find';\n\n/**\n * Helper used to know if the given modifier depends from another one.<br />\n * It checks if the needed modifier is listed and enabled.\n * @method\n * @memberof Popper.Utils\n * @param {Array} modifiers - list of modifiers\n * @param {String} requestingName - name of requesting modifier\n * @param {String} requestedName - name of requested modifier\n * @returns {Boolean}\n */\nexport default function isModifierRequired(\n  modifiers,\n  requestingName,\n  requestedName\n) {\n  const requesting = find(modifiers, ({ name }) => name === requestingName);\n\n  const isRequired =\n    !!requesting &&\n    modifiers.some(modifier => {\n      return (\n        modifier.name === requestedName &&\n        modifier.enabled &&\n        modifier.order < requesting.order\n      );\n    });\n\n  if (!isRequired) {\n    const requesting = `\\`${requestingName}\\``;\n    const requested = `\\`${requestedName}\\``;\n    console.warn(\n      `${requested} modifier is required by ${requesting} modifier in order to work, be sure to include it before ${requesting}!`\n    );\n  }\n  return isRequired;\n}\n","/**\n * Get the opposite placement variation of the given one\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement variation\n * @returns {String} flipped placement variation\n */\nexport default function getOppositeVariation(variation) {\n  if (variation === 'end') {\n    return 'start';\n  } else if (variation === 'start') {\n    return 'end';\n  }\n  return variation;\n}\n","import placements from '../methods/placements';\n\n// Get rid of `auto` `auto-start` and `auto-end`\nconst validPlacements = placements.slice(3);\n\n/**\n * Given an initial placement, returns all the subsequent placements\n * clockwise (or counter-clockwise).\n *\n * @method\n * @memberof Popper.Utils\n * @argument {String} placement - A valid placement (it accepts variations)\n * @argument {Boolean} counter - Set to true to walk the placements counterclockwise\n * @returns {Array} placements including their variations\n */\nexport default function clockwise(placement, counter = false) {\n  const index = validPlacements.indexOf(placement);\n  const arr = validPlacements\n    .slice(index + 1)\n    .concat(validPlacements.slice(0, index));\n  return counter ? arr.reverse() : arr;\n}\n","import isNumeric from '../utils/isNumeric';\nimport getClientRect from '../utils/getClientRect';\nimport find from '../utils/find';\n\n/**\n * Converts a string containing value + unit into a px value number\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} str - Value + unit string\n * @argument {String} measurement - `height` or `width`\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @returns {Number|String}\n * Value in pixels, or original string if no values were extracted\n */\nexport function toValue(str, measurement, popperOffsets, referenceOffsets) {\n  // separate value from unit\n  const split = str.match(/((?:\\-|\\+)?\\d*\\.?\\d*)(.*)/);\n  const value = +split[1];\n  const unit = split[2];\n\n  // If it's not a number it's an operator, I guess\n  if (!value) {\n    return str;\n  }\n\n  if (unit.indexOf('%') === 0) {\n    let element;\n    switch (unit) {\n      case '%p':\n        element = popperOffsets;\n        break;\n      case '%':\n      case '%r':\n      default:\n        element = referenceOffsets;\n    }\n\n    const rect = getClientRect(element);\n    return rect[measurement] / 100 * value;\n  } else if (unit === 'vh' || unit === 'vw') {\n    // if is a vh or vw, we calculate the size based on the viewport\n    let size;\n    if (unit === 'vh') {\n      size = Math.max(\n        document.documentElement.clientHeight,\n        window.innerHeight || 0\n      );\n    } else {\n      size = Math.max(\n        document.documentElement.clientWidth,\n        window.innerWidth || 0\n      );\n    }\n    return size / 100 * value;\n  } else {\n    // if is an explicit pixel unit, we get rid of the unit and keep the value\n    // if is an implicit unit, it's px, and we return just the value\n    return value;\n  }\n}\n\n/**\n * Parse an `offset` string to extrapolate `x` and `y` numeric offsets.\n * @function\n * @memberof {modifiers~offset}\n * @private\n * @argument {String} offset\n * @argument {Object} popperOffsets\n * @argument {Object} referenceOffsets\n * @argument {String} basePlacement\n * @returns {Array} a two cells array with x and y offsets in numbers\n */\nexport function parseOffset(\n  offset,\n  popperOffsets,\n  referenceOffsets,\n  basePlacement\n) {\n  const offsets = [0, 0];\n\n  // Use height if placement is left or right and index is 0 otherwise use width\n  // in this way the first offset will use an axis and the second one\n  // will use the other one\n  const useHeight = ['right', 'left'].indexOf(basePlacement) !== -1;\n\n  // Split the offset string to obtain a list of values and operands\n  // The regex addresses values with the plus or minus sign in front (+10, -20, etc)\n  const fragments = offset.split(/(\\+|\\-)/).map(frag => frag.trim());\n\n  // Detect if the offset string contains a pair of values or a single one\n  // they could be separated by comma or space\n  const divider = fragments.indexOf(\n    find(fragments, frag => frag.search(/,|\\s/) !== -1)\n  );\n\n  if (fragments[divider] && fragments[divider].indexOf(',') === -1) {\n    console.warn(\n      'Offsets separated by white space(s) are deprecated, use a comma (,) instead.'\n    );\n  }\n\n  // If divider is found, we divide the list of values and operands to divide\n  // them by ofset X and Y.\n  const splitRegex = /\\s*,\\s*|\\s+/;\n  let ops = divider !== -1\n    ? [\n        fragments\n          .slice(0, divider)\n          .concat([fragments[divider].split(splitRegex)[0]]),\n        [fragments[divider].split(splitRegex)[1]].concat(\n          fragments.slice(divider + 1)\n        ),\n      ]\n    : [fragments];\n\n  // Convert the values with units to absolute pixels to allow our computations\n  ops = ops.map((op, index) => {\n    // Most of the units rely on the orientation of the popper\n    const measurement = (index === 1 ? !useHeight : useHeight)\n      ? 'height'\n      : 'width';\n    let mergeWithPrevious = false;\n    return (\n      op\n        // This aggregates any `+` or `-` sign that aren't considered operators\n        // e.g.: 10 + +5 => [10, +, +5]\n        .reduce((a, b) => {\n          if (a[a.length - 1] === '' && ['+', '-'].indexOf(b) !== -1) {\n            a[a.length - 1] = b;\n            mergeWithPrevious = true;\n            return a;\n          } else if (mergeWithPrevious) {\n            a[a.length - 1] += b;\n            mergeWithPrevious = false;\n            return a;\n          } else {\n            return a.concat(b);\n          }\n        }, [])\n        // Here we convert the string values into number values (in px)\n        .map(str => toValue(str, measurement, popperOffsets, referenceOffsets))\n    );\n  });\n\n  // Loop trough the offsets arrays and execute the operations\n  ops.forEach((op, index) => {\n    op.forEach((frag, index2) => {\n      if (isNumeric(frag)) {\n        offsets[index] += frag * (op[index2 - 1] === '-' ? -1 : 1);\n      }\n    });\n  });\n  return offsets;\n}\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @argument {Number|String} options.offset=0\n * The offset value as described in the modifier description\n * @returns {Object} The data object, properly modified\n */\nexport default function offset(data, { offset }) {\n  const { placement, offsets: { popper, reference } } = data;\n  const basePlacement = placement.split('-')[0];\n\n  let offsets;\n  if (isNumeric(+offset)) {\n    offsets = [+offset, 0];\n  } else {\n    offsets = parseOffset(offset, popper, reference, basePlacement);\n  }\n\n  if (basePlacement === 'left') {\n    popper.top += offsets[0];\n    popper.left -= offsets[1];\n  } else if (basePlacement === 'right') {\n    popper.top += offsets[0];\n    popper.left += offsets[1];\n  } else if (basePlacement === 'top') {\n    popper.left += offsets[0];\n    popper.top -= offsets[1];\n  } else if (basePlacement === 'bottom') {\n    popper.left += offsets[0];\n    popper.top += offsets[1];\n  }\n\n  data.popper = popper;\n  return data;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOuterSizes from '../utils/getOuterSizes';\nimport isModifierRequired from '../utils/isModifierRequired';\nimport getStyleComputedProperty from '../utils/getStyleComputedProperty';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function arrow(data, options) {\n  // arrow depends on keepTogether in order to work\n  if (!isModifierRequired(data.instance.modifiers, 'arrow', 'keepTogether')) {\n    return data;\n  }\n\n  let arrowElement = options.element;\n\n  // if arrowElement is a string, suppose it's a CSS selector\n  if (typeof arrowElement === 'string') {\n    arrowElement = data.instance.popper.querySelector(arrowElement);\n\n    // if arrowElement is not found, don't run the modifier\n    if (!arrowElement) {\n      return data;\n    }\n  } else {\n    // if the arrowElement isn't a query selector we must check that the\n    // provided DOM node is child of its popper node\n    if (!data.instance.popper.contains(arrowElement)) {\n      console.warn(\n        'WARNING: `arrow.element` must be child of its popper element!'\n      );\n      return data;\n    }\n  }\n\n  const placement = data.placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isVertical = ['left', 'right'].indexOf(placement) !== -1;\n\n  const len = isVertical ? 'height' : 'width';\n  const sideCapitalized = isVertical ? 'Top' : 'Left';\n  const side = sideCapitalized.toLowerCase();\n  const altSide = isVertical ? 'left' : 'top';\n  const opSide = isVertical ? 'bottom' : 'right';\n  const arrowElementSize = getOuterSizes(arrowElement)[len];\n\n  //\n  // extends keepTogether behavior making sure the popper and its\n  // reference have enough pixels in conjunction\n  //\n\n  // top/left side\n  if (reference[opSide] - arrowElementSize < popper[side]) {\n    data.offsets.popper[side] -=\n      popper[side] - (reference[opSide] - arrowElementSize);\n  }\n  // bottom/right side\n  if (reference[side] + arrowElementSize > popper[opSide]) {\n    data.offsets.popper[side] +=\n      reference[side] + arrowElementSize - popper[opSide];\n  }\n  data.offsets.popper = getClientRect(data.offsets.popper);\n\n  // compute center of the popper\n  const center = reference[side] + reference[len] / 2 - arrowElementSize / 2;\n\n  // Compute the sideValue using the updated popper offsets\n  // take popper margin in account because we don't have this info available\n  const css = getStyleComputedProperty(data.instance.popper);\n  const popperMarginSide = parseFloat(css[`margin${sideCapitalized}`]);\n  const popperBorderSide = parseFloat(css[`border${sideCapitalized}Width`]);\n  let sideValue =\n    center - data.offsets.popper[side] - popperMarginSide - popperBorderSide;\n\n  // prevent arrowElement from being placed not contiguously to its popper\n  sideValue = Math.max(Math.min(popper[len] - arrowElementSize, sideValue), 0);\n\n  data.arrowElement = arrowElement;\n  data.offsets.arrow = {\n    [side]: Math.round(sideValue),\n    [altSide]: '', // make sure to unset any eventual altSide value from the DOM node\n  };\n\n  return data;\n}\n","/**\n * @function\n * @memberof Popper.Utils\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Boolean} shouldRound - If the offsets should be rounded at all\n * @returns {Object} The popper's position offsets rounded\n *\n * The tale of pixel-perfect positioning. It's still not 100% perfect, but as\n * good as it can be within reason.\n * Discussion here: https://github.com/FezVrasta/popper.js/pull/715\n *\n * Low DPI screens cause a popper to be blurry if not using full pixels (Safari\n * as well on High DPI screens).\n *\n * Firefox prefers no rounding for positioning and does not have blurriness on\n * high DPI screens.\n *\n * Only horizontal placement and left/right values need to be considered.\n */\nexport default function getRoundedOffsets(data, shouldRound) {\n  const { popper, reference } = data.offsets;\n  const { round, floor } = Math;\n  const noRound = v => v;\n  \n  const referenceWidth = round(reference.width);\n  const popperWidth = round(popper.width);\n  \n  const isVertical = ['left', 'right'].indexOf(data.placement) !== -1;\n  const isVariation = data.placement.indexOf('-') !== -1;\n  const sameWidthParity = referenceWidth % 2 === popperWidth % 2;\n  const bothOddWidth = referenceWidth % 2 === 1 && popperWidth % 2 === 1;\n\n  const horizontalToInteger = !shouldRound\n    ? noRound\n    : isVertical || isVariation || sameWidthParity\n    ? round\n    : floor;\n  const verticalToInteger = !shouldRound ? noRound : round;\n\n  return {\n    left: horizontalToInteger(\n      bothOddWidth && !isVariation && shouldRound\n        ? popper.left - 1\n        : popper.left\n    ),\n    top: verticalToInteger(popper.top),\n    bottom: verticalToInteger(popper.bottom),\n    right: horizontalToInteger(popper.right),\n  };\n}\n","export default typeof window !== 'undefined' && typeof document !== 'undefined' && typeof navigator !== 'undefined';\n","import isBrowser from './isBrowser';\n\nconst timeoutDuration = (function(){\n  const longerTimeoutBrowsers = ['Edge', 'Trident', 'Firefox'];\n  for (let i = 0; i < longerTimeoutBrowsers.length; i += 1) {\n    if (isBrowser && navigator.userAgent.indexOf(longerTimeoutBrowsers[i]) >= 0) {\n      return 1;\n    }\n  }\n  return 0;\n}());\n\nexport function microtaskDebounce(fn) {\n  let called = false\n  return () => {\n    if (called) {\n      return\n    }\n    called = true\n    window.Promise.resolve().then(() => {\n      called = false\n      fn()\n    })\n  }\n}\n\nexport function taskDebounce(fn) {\n  let scheduled = false;\n  return () => {\n    if (!scheduled) {\n      scheduled = true;\n      setTimeout(() => {\n        scheduled = false;\n        fn();\n      }, timeoutDuration);\n    }\n  };\n}\n\nconst supportsMicroTasks = isBrowser && window.Promise\n\n\n/**\n* Create a debounced version of a method, that's asynchronously deferred\n* but called in the minimum time possible.\n*\n* @method\n* @memberof Popper.Utils\n* @argument {Function} fn\n* @returns {Function}\n*/\nexport default (supportsMicroTasks\n  ? microtaskDebounce\n  : taskDebounce);\n","import getSupportedPropertyName from '../utils/getSupportedPropertyName';\nimport find from '../utils/find';\nimport getOffsetParent from '../utils/getOffsetParent';\nimport getBoundingClientRect from '../utils/getBoundingClientRect';\nimport getRoundedOffsets from '../utils/getRoundedOffsets';\nimport isBrowser from '../utils/isBrowser';\n\nconst isFirefox = isBrowser && /Firefox/i.test(navigator.userAgent);\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function computeStyle(data, options) {\n  const { x, y } = options;\n  const { popper } = data.offsets;\n\n  // Remove this legacy support in Popper.js v2\n  const legacyGpuAccelerationOption = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'applyStyle'\n  ).gpuAcceleration;\n  if (legacyGpuAccelerationOption !== undefined) {\n    console.warn(\n      'WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!'\n    );\n  }\n  const gpuAcceleration =\n    legacyGpuAccelerationOption !== undefined\n      ? legacyGpuAccelerationOption\n      : options.gpuAcceleration;\n\n  const offsetParent = getOffsetParent(data.instance.popper);\n  const offsetParentRect = getBoundingClientRect(offsetParent);\n\n  // Styles\n  const styles = {\n    position: popper.position,\n  };\n\n  const offsets = getRoundedOffsets(\n    data,\n    window.devicePixelRatio < 2 || !isFirefox\n  );\n\n  const sideA = x === 'bottom' ? 'top' : 'bottom';\n  const sideB = y === 'right' ? 'left' : 'right';\n\n  // if gpuAcceleration is set to `true` and transform is supported,\n  //  we use `translate3d` to apply the position to the popper we\n  // automatically use the supported prefixed version if needed\n  const prefixedProperty = getSupportedPropertyName('transform');\n\n  // now, let's make a step back and look at this code closely (wtf?)\n  // If the content of the popper grows once it's been positioned, it\n  // may happen that the popper gets misplaced because of the new content\n  // overflowing its reference element\n  // To avoid this problem, we provide two options (x and y), which allow\n  // the consumer to define the offset origin.\n  // If we position a popper on top of a reference element, we can set\n  // `x` to `top` to make the popper grow towards its top instead of\n  // its bottom.\n  let left, top;\n  if (sideA === 'bottom') {\n    // when offsetParent is <html> the positioning is relative to the bottom of the screen (excluding the scrollbar)\n    // and not the bottom of the html element\n    if (offsetParent.nodeName === 'HTML') {\n      top = -offsetParent.clientHeight + offsets.bottom;\n    } else {\n      top = -offsetParentRect.height + offsets.bottom;\n    }\n  } else {\n    top = offsets.top;\n  }\n  if (sideB === 'right') {\n    if (offsetParent.nodeName === 'HTML') {\n      left = -offsetParent.clientWidth + offsets.right;\n    } else {\n      left = -offsetParentRect.width + offsets.right;\n    }\n  } else {\n    left = offsets.left;\n  }\n  if (gpuAcceleration && prefixedProperty) {\n    styles[prefixedProperty] = `translate3d(${left}px, ${top}px, 0)`;\n    styles[sideA] = 0;\n    styles[sideB] = 0;\n    styles.willChange = 'transform';\n  } else {\n    // othwerise, we use the standard `top`, `left`, `bottom` and `right` properties\n    const invertTop = sideA === 'bottom' ? -1 : 1;\n    const invertLeft = sideB === 'right' ? -1 : 1;\n    styles[sideA] = top * invertTop;\n    styles[sideB] = left * invertLeft;\n    styles.willChange = `${sideA}, ${sideB}`;\n  }\n\n  // Attributes\n  const attributes = {\n    'x-placement': data.placement,\n  };\n\n  // Update `data` attributes, styles and arrowStyles\n  data.attributes = { ...attributes, ...data.attributes };\n  data.styles = { ...styles, ...data.styles };\n  data.arrowStyles = { ...data.offsets.arrow, ...data.arrowStyles };\n\n  return data;\n}\n","import getOppositePlacement from '../utils/getOppositePlacement';\nimport getOppositeVariation from '../utils/getOppositeVariation';\nimport getPopperOffsets from '../utils/getPopperOffsets';\nimport runModifiers from '../utils/runModifiers';\nimport getBoundaries from '../utils/getBoundaries';\nimport isModifierEnabled from '../utils/isModifierEnabled';\nimport clockwise from '../utils/clockwise';\n\nconst BEHAVIORS = {\n  FLIP: 'flip',\n  CLOCKWISE: 'clockwise',\n  COUNTERCLOCKWISE: 'counterclockwise',\n};\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function flip(data, options) {\n  // if `inner` modifier is enabled, we can't use the `flip` modifier\n  if (isModifierEnabled(data.instance.modifiers, 'inner')) {\n    return data;\n  }\n\n  if (data.flipped && data.placement === data.originalPlacement) {\n    // seems like flip is trying to loop, probably there's not enough space on any of the flippable sides\n    return data;\n  }\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    options.boundariesElement,\n    data.positionFixed\n  );\n\n  let placement = data.placement.split('-')[0];\n  let placementOpposite = getOppositePlacement(placement);\n  let variation = data.placement.split('-')[1] || '';\n\n  let flipOrder = [];\n\n  switch (options.behavior) {\n    case BEHAVIORS.FLIP:\n      flipOrder = [placement, placementOpposite];\n      break;\n    case BEHAVIORS.CLOCKWISE:\n      flipOrder = clockwise(placement);\n      break;\n    case BEHAVIORS.COUNTERCLOCKWISE:\n      flipOrder = clockwise(placement, true);\n      break;\n    default:\n      flipOrder = options.behavior;\n  }\n\n  flipOrder.forEach((step, index) => {\n    if (placement !== step || flipOrder.length === index + 1) {\n      return data;\n    }\n\n    placement = data.placement.split('-')[0];\n    placementOpposite = getOppositePlacement(placement);\n\n    const popperOffsets = data.offsets.popper;\n    const refOffsets = data.offsets.reference;\n\n    // using floor because the reference offsets may contain decimals we are not going to consider here\n    const floor = Math.floor;\n    const overlapsRef =\n      (placement === 'left' &&\n        floor(popperOffsets.right) > floor(refOffsets.left)) ||\n      (placement === 'right' &&\n        floor(popperOffsets.left) < floor(refOffsets.right)) ||\n      (placement === 'top' &&\n        floor(popperOffsets.bottom) > floor(refOffsets.top)) ||\n      (placement === 'bottom' &&\n        floor(popperOffsets.top) < floor(refOffsets.bottom));\n\n    const overflowsLeft = floor(popperOffsets.left) < floor(boundaries.left);\n    const overflowsRight = floor(popperOffsets.right) > floor(boundaries.right);\n    const overflowsTop = floor(popperOffsets.top) < floor(boundaries.top);\n    const overflowsBottom =\n      floor(popperOffsets.bottom) > floor(boundaries.bottom);\n\n    const overflowsBoundaries =\n      (placement === 'left' && overflowsLeft) ||\n      (placement === 'right' && overflowsRight) ||\n      (placement === 'top' && overflowsTop) ||\n      (placement === 'bottom' && overflowsBottom);\n\n    // flip the variation if required\n    const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n\n    // flips variation if reference element overflows boundaries\n    const flippedVariationByRef =\n      !!options.flipVariations &&\n      ((isVertical && variation === 'start' && overflowsLeft) ||\n        (isVertical && variation === 'end' && overflowsRight) ||\n        (!isVertical && variation === 'start' && overflowsTop) ||\n        (!isVertical && variation === 'end' && overflowsBottom));\n\n    // flips variation if popper content overflows boundaries\n    const flippedVariationByContent =\n      !!options.flipVariationsByContent &&\n      ((isVertical && variation === 'start' && overflowsRight) ||\n        (isVertical && variation === 'end' && overflowsLeft) ||\n        (!isVertical && variation === 'start' && overflowsBottom) ||\n        (!isVertical && variation === 'end' && overflowsTop));\n\n    const flippedVariation = flippedVariationByRef || flippedVariationByContent;\n\n    if (overlapsRef || overflowsBoundaries || flippedVariation) {\n      // this boolean to detect any flip loop\n      data.flipped = true;\n\n      if (overlapsRef || overflowsBoundaries) {\n        placement = flipOrder[index + 1];\n      }\n\n      if (flippedVariation) {\n        variation = getOppositeVariation(variation);\n      }\n\n      data.placement = placement + (variation ? '-' + variation : '');\n\n      // this object contains `position`, we want to preserve it along with\n      // any additional property we may add in the future\n      data.offsets.popper = {\n        ...data.offsets.popper,\n        ...getPopperOffsets(\n          data.instance.popper,\n          data.offsets.reference,\n          data.placement\n        ),\n      };\n\n      data = runModifiers(data.instance.modifiers, data, 'flip');\n    }\n  });\n  return data;\n}\n","// Utils\nimport debounce from './utils/debounce';\nimport isFunction from './utils/isFunction';\n\n// Methods\nimport update from './methods/update';\nimport destroy from './methods/destroy';\nimport enableEventListeners from './methods/enableEventListeners';\nimport disableEventListeners from './methods/disableEventListeners';\nimport Defaults from './methods/defaults';\nimport placements from './methods/placements';\n\nexport default class Popper {\n  /**\n   * Creates a new Popper.js instance.\n   * @class Popper\n   * @param {Element|referenceObject} reference - The reference element used to position the popper\n   * @param {Element} popper - The HTML / XML element used as the popper\n   * @param {Object} options - Your custom options to override the ones defined in [Defaults](#defaults)\n   * @return {Object} instance - The generated Popper.js instance\n   */\n  constructor(reference, popper, options = {}) {\n    // make update() debounced, so that it only runs at most once-per-tick\n    this.update = debounce(this.update.bind(this));\n\n    // with {} we create a new object with the options inside it\n    this.options = { ...Popper.Defaults, ...options };\n\n    // init state\n    this.state = {\n      isDestroyed: false,\n      isCreated: false,\n      scrollParents: [],\n    };\n\n    // get reference and popper elements (allow jQuery wrappers)\n    this.reference = reference && reference.jquery ? reference[0] : reference;\n    this.popper = popper && popper.jquery ? popper[0] : popper;\n\n    // Deep merge modifiers options\n    this.options.modifiers = {};\n    Object.keys({\n      ...Popper.Defaults.modifiers,\n      ...options.modifiers,\n    }).forEach(name => {\n      this.options.modifiers[name] = {\n        // If it's a built-in modifier, use it as base\n        ...(Popper.Defaults.modifiers[name] || {}),\n        // If there are custom options, override and merge with default ones\n        ...(options.modifiers ? options.modifiers[name] : {}),\n      };\n    });\n\n    // Refactoring modifiers' list (Object => Array)\n    this.modifiers = Object.keys(this.options.modifiers)\n      .map(name => ({\n        name,\n        ...this.options.modifiers[name],\n      }))\n      // sort the modifiers by order\n      .sort((a, b) => a.order - b.order);\n\n    // modifiers have the ability to execute arbitrary code when Popper.js get inited\n    // such code is executed in the same order of its modifier\n    // they could add new properties to their options configuration\n    // BE AWARE: don't add options to `options.modifiers.name` but to `modifierOptions`!\n    this.modifiers.forEach(modifierOptions => {\n      if (modifierOptions.enabled && isFunction(modifierOptions.onLoad)) {\n        modifierOptions.onLoad(\n          this.reference,\n          this.popper,\n          this.options,\n          modifierOptions,\n          this.state\n        );\n      }\n    });\n\n    // fire the first update to position the popper in the right place\n    this.update();\n\n    const eventsEnabled = this.options.eventsEnabled;\n    if (eventsEnabled) {\n      // setup event listeners, they will take care of update the position in specific situations\n      this.enableEventListeners();\n    }\n\n    this.state.eventsEnabled = eventsEnabled;\n  }\n\n  // We can't use class properties because they don't get listed in the\n  // class prototype and break stuff like Sinon stubs\n  update() {\n    return update.call(this);\n  }\n  destroy() {\n    return destroy.call(this);\n  }\n  enableEventListeners() {\n    return enableEventListeners.call(this);\n  }\n  disableEventListeners() {\n    return disableEventListeners.call(this);\n  }\n\n  /**\n   * Schedules an update. It will run on the next UI update available.\n   * @method scheduleUpdate\n   * @memberof Popper\n   */\n  scheduleUpdate = () => requestAnimationFrame(this.update);\n\n  /**\n   * Collection of utilities useful when writing custom modifiers.\n   * Starting from version 1.7, this method is available only if you\n   * include `popper-utils.js` before `popper.js`.\n   *\n   * **DEPRECATION**: This way to access PopperUtils is deprecated\n   * and will be removed in v2! Use the PopperUtils module directly instead.\n   * Due to the high instability of the methods contained in Utils, we can't\n   * guarantee them to follow semver. Use them at your own risk!\n   * @static\n   * @private\n   * @type {Object}\n   * @deprecated since version 1.8\n   * @member Utils\n   * @memberof Popper\n   */\n  static Utils = (typeof window !== 'undefined' ? window : global).PopperUtils;\n\n  static placements = placements;\n\n  static Defaults = Defaults;\n}\n\n/**\n * The `referenceObject` is an object that provides an interface compatible with Popper.js\n * and lets you use it as replacement of a real DOM node.<br />\n * You can use this method to position a popper relatively to a set of coordinates\n * in case you don't have a DOM node to use as reference.\n *\n * ```\n * new Popper(referenceObject, popperNode);\n * ```\n *\n * NB: This feature isn't supported in Internet Explorer 10.\n * @name referenceObject\n * @property {Function} data.getBoundingClientRect\n * A function that returns a set of coordinates compatible with the native `getBoundingClientRect` method.\n * @property {number} data.clientWidth\n * An ES6 getter that will return the width of the virtual reference element.\n * @property {number} data.clientHeight\n * An ES6 getter that will return the height of the virtual reference element.\n */\n","import applyStyle, { applyStyleOnLoad } from './applyStyle';\nimport computeStyle from './computeStyle';\nimport arrow from './arrow';\nimport flip from './flip';\nimport keepTogether from './keepTogether';\nimport offset from './offset';\nimport preventOverflow from './preventOverflow';\nimport shift from './shift';\nimport hide from './hide';\nimport inner from './inner';\n\n/**\n * Modifier function, each modifier can have a function of this type assigned\n * to its `fn` property.<br />\n * These functions will be called on each update, this means that you must\n * make sure they are performant enough to avoid performance bottlenecks.\n *\n * @function ModifierFn\n * @argument {dataObject} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {dataObject} The data object, properly modified\n */\n\n/**\n * Modifiers are plugins used to alter the behavior of your poppers.<br />\n * Popper.js uses a set of 9 modifiers to provide all the basic functionalities\n * needed by the library.\n *\n * Usually you don't want to override the `order`, `fn` and `onLoad` props.\n * All the other properties are configurations that could be tweaked.\n * @namespace modifiers\n */\nexport default {\n  /**\n   * Modifier used to shift the popper on the start or end of its reference\n   * element.<br />\n   * It will read the variation of the `placement` property.<br />\n   * It can be one either `-end` or `-start`.\n   * @memberof modifiers\n   * @inner\n   */\n  shift: {\n    /** @prop {number} order=100 - Index used to define the order of execution */\n    order: 100,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: shift,\n  },\n\n  /**\n   * The `offset` modifier can shift your popper on both its axis.\n   *\n   * It accepts the following units:\n   * - `px` or unit-less, interpreted as pixels\n   * - `%` or `%r`, percentage relative to the length of the reference element\n   * - `%p`, percentage relative to the length of the popper element\n   * - `vw`, CSS viewport width unit\n   * - `vh`, CSS viewport height unit\n   *\n   * For length is intended the main axis relative to the placement of the popper.<br />\n   * This means that if the placement is `top` or `bottom`, the length will be the\n   * `width`. In case of `left` or `right`, it will be the `height`.\n   *\n   * You can provide a single value (as `Number` or `String`), or a pair of values\n   * as `String` divided by a comma or one (or more) white spaces.<br />\n   * The latter is a deprecated method because it leads to confusion and will be\n   * removed in v2.<br />\n   * Additionally, it accepts additions and subtractions between different units.\n   * Note that multiplications and divisions aren't supported.\n   *\n   * Valid examples are:\n   * ```\n   * 10\n   * '10%'\n   * '10, 10'\n   * '10%, 10'\n   * '10 + 10%'\n   * '10 - 5vh + 3%'\n   * '-10px + 5vh, 5px - 6%'\n   * ```\n   * > **NB**: If you desire to apply offsets to your poppers in a way that may make them overlap\n   * > with their reference element, unfortunately, you will have to disable the `flip` modifier.\n   * > You can read more on this at this [issue](https://github.com/FezVrasta/popper.js/issues/373).\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  offset: {\n    /** @prop {number} order=200 - Index used to define the order of execution */\n    order: 200,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: offset,\n    /** @prop {Number|String} offset=0\n     * The offset value as described in the modifier description\n     */\n    offset: 0,\n  },\n\n  /**\n   * Modifier used to prevent the popper from being positioned outside the boundary.\n   *\n   * A scenario exists where the reference itself is not within the boundaries.<br />\n   * We can say it has \"escaped the boundaries\" — or just \"escaped\".<br />\n   * In this case we need to decide whether the popper should either:\n   *\n   * - detach from the reference and remain \"trapped\" in the boundaries, or\n   * - if it should ignore the boundary and \"escape with its reference\"\n   *\n   * When `escapeWithReference` is set to`true` and reference is completely\n   * outside its boundaries, the popper will overflow (or completely leave)\n   * the boundaries in order to remain attached to the edge of the reference.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  preventOverflow: {\n    /** @prop {number} order=300 - Index used to define the order of execution */\n    order: 300,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: preventOverflow,\n    /**\n     * @prop {Array} [priority=['left','right','top','bottom']]\n     * Popper will try to prevent overflow following these priorities by default,\n     * then, it could overflow on the left and on top of the `boundariesElement`\n     */\n    priority: ['left', 'right', 'top', 'bottom'],\n    /**\n     * @prop {number} padding=5\n     * Amount of pixel used to define a minimum distance between the boundaries\n     * and the popper. This makes sure the popper always has a little padding\n     * between the edges of its container\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='scrollParent'\n     * Boundaries used by the modifier. Can be `scrollParent`, `window`,\n     * `viewport` or any DOM element.\n     */\n    boundariesElement: 'scrollParent',\n  },\n\n  /**\n   * Modifier used to make sure the reference and its popper stay near each other\n   * without leaving any gap between the two. Especially useful when the arrow is\n   * enabled and you want to ensure that it points to its reference element.\n   * It cares only about the first axis. You can still have poppers with margin\n   * between the popper and its reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  keepTogether: {\n    /** @prop {number} order=400 - Index used to define the order of execution */\n    order: 400,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: keepTogether,\n  },\n\n  /**\n   * This modifier is used to move the `arrowElement` of the popper to make\n   * sure it is positioned between the reference element and its popper element.\n   * It will read the outer size of the `arrowElement` node to detect how many\n   * pixels of conjunction are needed.\n   *\n   * It has no effect if no `arrowElement` is provided.\n   * @memberof modifiers\n   * @inner\n   */\n  arrow: {\n    /** @prop {number} order=500 - Index used to define the order of execution */\n    order: 500,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: arrow,\n    /** @prop {String|HTMLElement} element='[x-arrow]' - Selector or node used as arrow */\n    element: '[x-arrow]',\n  },\n\n  /**\n   * Modifier used to flip the popper's placement when it starts to overlap its\n   * reference element.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   *\n   * **NOTE:** this modifier will interrupt the current update cycle and will\n   * restart it if it detects the need to flip the placement.\n   * @memberof modifiers\n   * @inner\n   */\n  flip: {\n    /** @prop {number} order=600 - Index used to define the order of execution */\n    order: 600,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: flip,\n    /**\n     * @prop {String|Array} behavior='flip'\n     * The behavior used to change the popper's placement. It can be one of\n     * `flip`, `clockwise`, `counterclockwise` or an array with a list of valid\n     * placements (with optional variations)\n     */\n    behavior: 'flip',\n    /**\n     * @prop {number} padding=5\n     * The popper will flip if it hits the edges of the `boundariesElement`\n     */\n    padding: 5,\n    /**\n     * @prop {String|HTMLElement} boundariesElement='viewport'\n     * The element which will define the boundaries of the popper position.\n     * The popper will never be placed outside of the defined boundaries\n     * (except if `keepTogether` is enabled)\n     */\n    boundariesElement: 'viewport',\n    /**\n     * @prop {Boolean} flipVariations=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the reference element overlaps its boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariations: false,\n    /**\n     * @prop {Boolean} flipVariationsByContent=false\n     * The popper will switch placement variation between `-start` and `-end` when\n     * the popper element overlaps its reference boundaries.\n     *\n     * The original placement should have a set variation.\n     */\n    flipVariationsByContent: false,\n  },\n\n  /**\n   * Modifier used to make the popper flow toward the inner of the reference element.\n   * By default, when this modifier is disabled, the popper will be placed outside\n   * the reference element.\n   * @memberof modifiers\n   * @inner\n   */\n  inner: {\n    /** @prop {number} order=700 - Index used to define the order of execution */\n    order: 700,\n    /** @prop {Boolean} enabled=false - Whether the modifier is enabled or not */\n    enabled: false,\n    /** @prop {ModifierFn} */\n    fn: inner,\n  },\n\n  /**\n   * Modifier used to hide the popper when its reference element is outside of the\n   * popper boundaries. It will set a `x-out-of-boundaries` attribute which can\n   * be used to hide with a CSS selector the popper when its reference is\n   * out of boundaries.\n   *\n   * Requires the `preventOverflow` modifier before it in order to work.\n   * @memberof modifiers\n   * @inner\n   */\n  hide: {\n    /** @prop {number} order=800 - Index used to define the order of execution */\n    order: 800,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: hide,\n  },\n\n  /**\n   * Computes the style that will be applied to the popper element to gets\n   * properly positioned.\n   *\n   * Note that this modifier will not touch the DOM, it just prepares the styles\n   * so that `applyStyle` modifier can apply it. This separation is useful\n   * in case you need to replace `applyStyle` with a custom implementation.\n   *\n   * This modifier has `850` as `order` value to maintain backward compatibility\n   * with previous versions of Popper.js. Expect the modifiers ordering method\n   * to change in future major versions of the library.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  computeStyle: {\n    /** @prop {number} order=850 - Index used to define the order of execution */\n    order: 850,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: computeStyle,\n    /**\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: true,\n    /**\n     * @prop {string} [x='bottom']\n     * Where to anchor the X axis (`bottom` or `top`). AKA X offset origin.\n     * Change this if your popper should grow in a direction different from `bottom`\n     */\n    x: 'bottom',\n    /**\n     * @prop {string} [x='left']\n     * Where to anchor the Y axis (`left` or `right`). AKA Y offset origin.\n     * Change this if your popper should grow in a direction different from `right`\n     */\n    y: 'right',\n  },\n\n  /**\n   * Applies the computed styles to the popper element.\n   *\n   * All the DOM manipulations are limited to this modifier. This is useful in case\n   * you want to integrate Popper.js inside a framework or view library and you\n   * want to delegate all the DOM manipulations to it.\n   *\n   * Note that if you disable this modifier, you must make sure the popper element\n   * has its position set to `absolute` before Popper.js can do its work!\n   *\n   * Just disable this modifier and define your own to achieve the desired effect.\n   *\n   * @memberof modifiers\n   * @inner\n   */\n  applyStyle: {\n    /** @prop {number} order=900 - Index used to define the order of execution */\n    order: 900,\n    /** @prop {Boolean} enabled=true - Whether the modifier is enabled or not */\n    enabled: true,\n    /** @prop {ModifierFn} */\n    fn: applyStyle,\n    /** @prop {Function} */\n    onLoad: applyStyleOnLoad,\n    /**\n     * @deprecated since version 1.10.0, the property moved to `computeStyle` modifier\n     * @prop {Boolean} gpuAcceleration=true\n     * If true, it uses the CSS 3D transformation to position the popper.\n     * Otherwise, it will use the `top` and `left` properties\n     */\n    gpuAcceleration: undefined,\n  },\n};\n\n/**\n * The `dataObject` is an object containing all the information used by Popper.js.\n * This object is passed to modifiers and to the `onCreate` and `onUpdate` callbacks.\n * @name dataObject\n * @property {Object} data.instance The Popper.js instance\n * @property {String} data.placement Placement applied to popper\n * @property {String} data.originalPlacement Placement originally defined on init\n * @property {Boolean} data.flipped True if popper has been flipped by flip modifier\n * @property {Boolean} data.hide True if the reference element is out of boundaries, useful to know when to hide the popper\n * @property {HTMLElement} data.arrowElement Node used as arrow by arrow modifier\n * @property {Object} data.styles Any CSS property defined here will be applied to the popper. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.arrowStyles Any CSS property defined here will be applied to the popper arrow. It expects the JavaScript nomenclature (eg. `marginBottom`)\n * @property {Object} data.boundaries Offsets of the popper boundaries\n * @property {Object} data.offsets The measurements of popper, reference and arrow elements\n * @property {Object} data.offsets.popper `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.reference `top`, `left`, `width`, `height` values\n * @property {Object} data.offsets.arrow] `top` and `left` offsets, only one of them will be different from 0\n */\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function shift(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const shiftvariation = placement.split('-')[1];\n\n  // if shift shiftvariation is specified, run the modifier\n  if (shiftvariation) {\n    const { reference, popper } = data.offsets;\n    const isVertical = ['bottom', 'top'].indexOf(basePlacement) !== -1;\n    const side = isVertical ? 'left' : 'top';\n    const measurement = isVertical ? 'width' : 'height';\n\n    const shiftOffsets = {\n      start: { [side]: reference[side] },\n      end: {\n        [side]: reference[side] + reference[measurement] - popper[measurement],\n      },\n    };\n\n    data.offsets.popper = { ...popper, ...shiftOffsets[shiftvariation] };\n  }\n\n  return data;\n}\n","import getOffsetParent from '../utils/getOffsetParent';\nimport getBoundaries from '../utils/getBoundaries';\nimport getSupportedPropertyName from '../utils/getSupportedPropertyName';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function preventOverflow(data, options) {\n  let boundariesElement =\n    options.boundariesElement || getOffsetParent(data.instance.popper);\n\n  // If offsetParent is the reference element, we really want to\n  // go one step up and use the next offsetParent as reference to\n  // avoid to make this modifier completely useless and look like broken\n  if (data.instance.reference === boundariesElement) {\n    boundariesElement = getOffsetParent(boundariesElement);\n  }\n\n  // NOTE: DOM access here\n  // resets the popper's position so that the document size can be calculated excluding\n  // the size of the popper element itself\n  const transformProp = getSupportedPropertyName('transform');\n  const popperStyles = data.instance.popper.style; // assignment to help minification\n  const { top, left, [transformProp]: transform } = popperStyles;\n  popperStyles.top = '';\n  popperStyles.left = '';\n  popperStyles[transformProp] = '';\n\n  const boundaries = getBoundaries(\n    data.instance.popper,\n    data.instance.reference,\n    options.padding,\n    boundariesElement,\n    data.positionFixed\n  );\n\n  // NOTE: DOM access here\n  // restores the original style properties after the offsets have been computed\n  popperStyles.top = top;\n  popperStyles.left = left;\n  popperStyles[transformProp] = transform;\n\n  options.boundaries = boundaries;\n\n  const order = options.priority;\n  let popper = data.offsets.popper;\n\n  const check = {\n    primary(placement) {\n      let value = popper[placement];\n      if (\n        popper[placement] < boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.max(popper[placement], boundaries[placement]);\n      }\n      return { [placement]: value };\n    },\n    secondary(placement) {\n      const mainSide = placement === 'right' ? 'left' : 'top';\n      let value = popper[mainSide];\n      if (\n        popper[placement] > boundaries[placement] &&\n        !options.escapeWithReference\n      ) {\n        value = Math.min(\n          popper[mainSide],\n          boundaries[placement] -\n            (placement === 'right' ? popper.width : popper.height)\n        );\n      }\n      return { [mainSide]: value };\n    },\n  };\n\n  order.forEach(placement => {\n    const side =\n      ['left', 'top'].indexOf(placement) !== -1 ? 'primary' : 'secondary';\n    popper = { ...popper, ...check[side](placement) };\n  });\n\n  data.offsets.popper = popper;\n\n  return data;\n}\n","/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function keepTogether(data) {\n  const { popper, reference } = data.offsets;\n  const placement = data.placement.split('-')[0];\n  const floor = Math.floor;\n  const isVertical = ['top', 'bottom'].indexOf(placement) !== -1;\n  const side = isVertical ? 'right' : 'bottom';\n  const opSide = isVertical ? 'left' : 'top';\n  const measurement = isVertical ? 'width' : 'height';\n\n  if (popper[side] < floor(reference[opSide])) {\n    data.offsets.popper[opSide] =\n      floor(reference[opSide]) - popper[measurement];\n  }\n  if (popper[opSide] > floor(reference[side])) {\n    data.offsets.popper[opSide] = floor(reference[side]);\n  }\n\n  return data;\n}\n","import getClientRect from '../utils/getClientRect';\nimport getOppositePlacement from '../utils/getOppositePlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function inner(data) {\n  const placement = data.placement;\n  const basePlacement = placement.split('-')[0];\n  const { popper, reference } = data.offsets;\n  const isHoriz = ['left', 'right'].indexOf(basePlacement) !== -1;\n\n  const subtractLength = ['top', 'left'].indexOf(basePlacement) === -1;\n\n  popper[isHoriz ? 'left' : 'top'] =\n    reference[basePlacement] -\n    (subtractLength ? popper[isHoriz ? 'width' : 'height'] : 0);\n\n  data.placement = getOppositePlacement(placement);\n  data.offsets.popper = getClientRect(popper);\n\n  return data;\n}\n","import isModifierRequired from '../utils/isModifierRequired';\nimport find from '../utils/find';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by update method\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The data object, properly modified\n */\nexport default function hide(data) {\n  if (!isModifierRequired(data.instance.modifiers, 'hide', 'preventOverflow')) {\n    return data;\n  }\n\n  const refRect = data.offsets.reference;\n  const bound = find(\n    data.instance.modifiers,\n    modifier => modifier.name === 'preventOverflow'\n  ).boundaries;\n\n  if (\n    refRect.bottom < bound.top ||\n    refRect.left > bound.right ||\n    refRect.top > bound.bottom ||\n    refRect.right < bound.left\n  ) {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === true) {\n      return data;\n    }\n\n    data.hide = true;\n    data.attributes['x-out-of-boundaries'] = '';\n  } else {\n    // Avoid unnecessary DOM access if visibility hasn't changed\n    if (data.hide === false) {\n      return data;\n    }\n\n    data.hide = false;\n    data.attributes['x-out-of-boundaries'] = false;\n  }\n\n  return data;\n}\n","import setStyles from '../utils/setStyles';\nimport setAttributes from '../utils/setAttributes';\nimport getReferenceOffsets from '../utils/getReferenceOffsets';\nimport computeAutoPlacement from '../utils/computeAutoPlacement';\n\n/**\n * @function\n * @memberof Modifiers\n * @argument {Object} data - The data object generated by `update` method\n * @argument {Object} data.styles - List of style properties - values to apply to popper element\n * @argument {Object} data.attributes - List of attribute properties - values to apply to popper element\n * @argument {Object} options - Modifiers configuration and options\n * @returns {Object} The same data object\n */\nexport default function applyStyle(data) {\n  // any property present in `data.styles` will be applied to the popper,\n  // in this way we can make the 3rd party modifiers add custom styles to it\n  // Be aware, modifiers could override the properties defined in the previous\n  // lines of this modifier!\n  setStyles(data.instance.popper, data.styles);\n\n  // any property present in `data.attributes` will be applied to the popper,\n  // they will be set as HTML attributes of the element\n  setAttributes(data.instance.popper, data.attributes);\n\n  // if arrowElement is defined and arrowStyles has some properties\n  if (data.arrowElement && Object.keys(data.arrowStyles).length) {\n    setStyles(data.arrowElement, data.arrowStyles);\n  }\n\n  return data;\n}\n\n/**\n * Set the x-placement attribute before everything else because it could be used\n * to add margins to the popper margins needs to be calculated to get the\n * correct popper offsets.\n * @method\n * @memberof Popper.modifiers\n * @param {HTMLElement} reference - The reference element used to position the popper\n * @param {HTMLElement} popper - The HTML element used as popper\n * @param {Object} options - Popper.js options\n */\nexport function applyStyleOnLoad(\n  reference,\n  popper,\n  options,\n  modifierOptions,\n  state\n) {\n  // compute reference element offsets\n  const referenceOffsets = getReferenceOffsets(state, popper, reference, options.positionFixed);\n\n  // compute auto placement, store placement inside the data object,\n  // modifiers will be able to edit `placement` if needed\n  // and refer to originalPlacement to know the original value\n  const placement = computeAutoPlacement(\n    options.placement,\n    referenceOffsets,\n    popper,\n    reference,\n    options.modifiers.flip.boundariesElement,\n    options.modifiers.flip.padding\n  );\n\n  popper.setAttribute('x-placement', placement);\n\n  // Apply `position` to popper before anything else because\n  // without the position applied we can't guarantee correct computations\n  setStyles(popper, { position: options.positionFixed ? 'fixed' : 'absolute' });\n\n  return options;\n}\n","/**\n * Set the attributes to the given popper\n * @method\n * @memberof Popper.Utils\n * @argument {Element} element - Element to apply the attributes to\n * @argument {Object} styles\n * Object with a list of properties and values which will be applied to the element\n */\nexport default function setAttributes(element, attributes) {\n  Object.keys(attributes).forEach(function(prop) {\n    const value = attributes[prop];\n    if (value !== false) {\n      element.setAttribute(prop, attributes[prop]);\n    } else {\n      element.removeAttribute(prop);\n    }\n  });\n}\n"]}